
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <unordered_map>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3fffffff
#define L_INF 0x3f3f3f3f
#define max_v 11000

#define x first
#define y second
using namespace std;

typedef pair<long long, long long> point;

double dp[max_v][max_v];
double dist[max_v][max_v];


vector<point> points;

double get_dist(int i, int j){
    double x = points[i].x - points[j].x;
    double y = points[i].y - points[j].y;
    return sqrt((double)((x*x) + (y*y)));
}


int main() {
  	int n;
  	while(cin >> n){
  	    //memset(dp, 0, sizeof(dp));
  	    //memset(dist, 0, sizeof(dist));
  	    points.clear();
  	    
  	    for(int i = 0; i<n; i++){
  	        long long a, b;
  	        scanf("%lld%lld", &a, &b);
  	        points.push_back(make_pair(a, b));
  	    }
  	    
  	    //sort(points.begin(), points.end());
  	    
  	    for(int i = 0; i<n; i++){
  	        for(int j = 0; j<n; j++){
  	            dist[i][j] = get_dist(i, j);
  	        }   
  	    }
  	    
  	    dp[1][0] = get_dist(1, 0);
  	    
  	    for(int i = 2; i<n; i++){
  	        for(int j = 0; j<i; j++){
  	            if(j != i-1){
  	                dp[i][j] = dp[i-1][j] + dist[i-1][i];   
  	            }else{
  	                double best = L_INF;
  	                for(int k = 0; k<j; k++){
  	                    best = min(best, dp[i-1][k] + dist[k][i]);   
  	                }
  	                dp[i][j] = best;
  	            }
  	            //printf("%5lld", dp[i][j]);
  	        }
  	        //puts("");
  	    }
  	    
  	    double ans = (double)L_INF;
  	    
  	    for(int i = 0; i<n-1; i++){
  	    	ans = min(ans, dp[n-1][i] + dist[i][n-1]);	
		}
  	    
  	    printf("%.2lf\n", ans);
  	    
  	}
  	
  	
  	
  	
  	
  	return 0;
}

