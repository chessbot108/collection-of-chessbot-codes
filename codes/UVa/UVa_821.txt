
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <unordered_map>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 110

#define pow_2(n) (1 << n)

using namespace std;

int graph[max_v][max_v];
int dp[max_v][max_v];
bool vis[max_v];
int V;

int floyd(){
	memcpy(dp, graph, sizeof(graph));
	
	for(int i = 1; i<=V; i++){
		for(int j = 1; j<=V; j++){
			for(int k = 1; k<=V; k++){
				if(!vis[j] || !vis[k] || !vis[i]) cont;
				
				dp[j][k] = min(dp[j][k], dp[j][i] + dp[i][k]);
			}
		}
	}
	int total = 0;
	for(int i = 1; i<=V; i++){
		for(int j = 1; j<=V; j++){
			if(i == j || !vis[i] || !vis[j]) cont;
			total += dp[i][j];
		}
	}
	return total;
}

int main() {
  	int a, b, kase = 0;
  	while(scanf("%d %d", &a, &b)){
  		if(a + b == 0) break;
  		memset(dp, 0, sizeof(dp));
  		memset(graph, byte_max, sizeof(graph));
  		memset(vis, false, sizeof(vis));
  		
  		V = 0;
  		
  		while(a + b != 0){
  			V = max(a, V);
  			V = max(b, V);
  			
  			vis[a] = true;
  			vis[b] = true;
  			
			graph[a][b] = 1;
			scanf("%d %d", &a, &b);
		}
  		
  		double sol = (double)floyd();
  		
		int nums = 0;
  		
  		for(int i = 1; i<=V; i++){
  			if(vis[i]) nums++;
		}
  			
  		double den = double(nums*nums - nums);
  		
  		printf("Case %d: average length between pages = %.3lf clicks\n", ++kase, sol/den);
  		
  		
	}
  		
  	
  	
  	
  	return 0;
}