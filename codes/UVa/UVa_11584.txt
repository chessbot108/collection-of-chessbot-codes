#include <fstream>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <bitset>
#include <unordered_map>
#define cont continue
#define int_max 0x3fffffff
#define byte_max 0x3f
#define max_v 3010

using namespace std;

int dp[max_v];
bool is_pali[max_v][max_v];

void comp_pali(string& s){//the area is based off A.C.'s "make_edges" function
	for(int i = 0; i<=s.size(); i++){
		is_pali[i][i] = true; //an empty string is a palidrome, this will help later computations
	}
    for(int i = 0; i<s.size(); i++){
    	is_pali[i][i+1] = true; //all strings 1 letter long are a palidrome
	}
	for(int i = 2; i<=s.size(); i++){ //length of palidrome tested for
		for(int j = 0; j+i <= s.size(); j++){ //try all strings length i
			//string s is a palidrome if the first letter is the same as the last letter and the other letter are a palidrome
			is_pali[j][j+i] = (is_pali[j+1][j+i -1] & (s[j] == s[j+i -1])); 		
		}
	}

}

int main(){
	int T;
	cin >> T;
	while(T--){
		string s;
		cin >> s;
		int n = s.size();
		memset(dp, byte_max, sizeof(dp));
		memset(is_pali, false, sizeof(is_pali));
		comp_pali(s);
		dp[0] = 0;
		for(int i = 1; i<=n; i++){
			for(int j = 0; j<i; j++){
				if(is_pali[j][i]){
					dp[i] = min(dp[i], dp[j] + 1);
				}
			}
		}
		cout << dp[n] << endl;
	}
	
	return 0;
}