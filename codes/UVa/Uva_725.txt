// Example program
#include <iostream>
#include <string>
#include <queue>
#include <stack>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <iomanip>
#include <map>
#include <utility>

#define int_max 0x3fffffff //practical upper bound
#define cont continue
#define max_v 101000

using namespace std;
int dig[6];
bool taken[11];
bool digit(int f){
    memset(dig, 0, sizeof(dig));
    for(int i = 0; i<5; i++){
        dig[i] = f%10;
        f /= 10;
        if(taken[dig[i]]) return false;
        else taken[dig[i]] = true;
    }
    
    for(int i = 0; i<5; i++){
        for(int j = 0; j<5; j++){
            if(i == j){
                cont;
            }else if(dig[i] == dig[j]){
                return false;   
            }
            
        }
    }
    return true;
    
}


int main(){
  int n;
  vector <pair<int, int>> sol;
  bool fir = false;
  while(cin >> n){
     if(n == 0) break;
     if(fir) cout << endl;
     fir = true;
     for(int i = 0; i < 100000; i++){
        memset(taken, false, sizeof(taken));
        if(!digit(i)){
            cont;    
        }
        int a = i/n;
        //cout <<i << ' ' <<  digit(a) << endl;
        if(a*n != i || !digit(a)){
            cont;   
        }
        
        //printf("%d / %d = %d\n", i, a, n);
        
        sol.push_back(make_pair(i, a));
        bool works = true;
        for(int i = 0; i<10; i++){
            works &= taken[i];
        }
        if(!works) cont;
        //cout << "works!!\n";
     }
     if(sol.size() == 0){
           printf("There are no solutions for %d.\n", n);
     }else{
        // cout << sol.size() << endl;
        for(int i = 0; i<sol.size(); i++){
            if(sol[i].first < 10000){
                cout << "0";   
            }
            
            printf("%d / ", sol[i].first);
            
            if(sol[i].second < 10000){
                cout << "0";   
            }
            
            printf("%d = %d\n", sol[i].second, n);
        }
        
        sol.clear();
        
     }
    
    //cout << endl;
       
  }
  
  
  
  
  return 0;
}
