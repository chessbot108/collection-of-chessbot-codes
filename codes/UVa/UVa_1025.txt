
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <unordered_map>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>
#include <ctime>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 2200
#define N 60
#define pow_2(n) (1 << n)

using namespace std;

int dp[N][max_v], n, T, m1, m2;
int trav[N], from[N], to[N];
bool go_left[N][max_v], go_right[N][max_v];

int DP(int st, int t){
	if(st < 0 || st >= n || t > T) return int_max; //invalid
	else if(dp[st][t] || (st == n-1 && t == T)) return dp[st][t];
	
	int& cur = dp[st][t];
	cur = int_max;
	
	if(go_left[st][t]) cur = min(cur, DP(st - 1, t + trav[st - 1]));
	if(go_right[st][t]) cur = min(cur, DP(st + 1, t + trav[st]));
	cur = min(cur, DP(st, t+1) + 1);
	
	return cur;
}

void pre_comp(){
	for(int i = 0; i<m1; i++)
		go_right[0][from[i]] = true;
	
	for(int i = 0; i<m2; i++)
		go_left[n - 1][to[i]] = true; 
	
	for(int i = 0; i<n-1; i++){
		for(int j = 0; j<1300; j++){
			if(go_right[i][j])
				go_right[i + 1][j + trav[i]] = true;
		}
	}
	for(int i = n-1; i>0; i--){
		for(int j = 0; j<1300; j++){
			if(go_left[i][j])
				go_left[i - 1][j + trav[i-1]] = true;
		}
	}
}

int main() {
	int kase = 0;
  	while(scanf("%d", &n)){
  		if(n == 0) break;
		
		memset(from, 0, sizeof(from));
		memset(to, 0, sizeof(to));
		memset(go_left, false, sizeof(go_left));
		memset(go_right, false, sizeof(go_right));
		memset(dp, 0, sizeof(dp));
		memset(trav, 0, sizeof(trav));
		
		scanf("%d", &T);
		
		for(int i = 0; i<n-1; i++){
			scanf("%d", &trav[i]);
		}
		
		scanf("%d", &m1);
		for(int i = 0; i<m1; i++)
			scanf("%d", &from[i]);
		
		scanf("%d", &m2);
		for(int i = 0; i<m2; i++)
			scanf("%d", &to[i]);
			
		pre_comp();
		
		printf("Case Number %d:", ++kase);
		
		if(DP(0, 0) != int_max){
			printf(" %d\n", DP(0, 0));
		}else{
			printf(" impossible\n");
		}
		
	}
	
  	return 0;
}

