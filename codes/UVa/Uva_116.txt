#include <fstream>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#define cont continue
#define ll_max 0x3ffffffffff
#define max_v 110
using namespace std;
long long arr[max_v][max_v];
long long dp[max_v][max_v];
int paths[max_v][max_v];
int n, m;
inline int wrap(int y){
	return (y + n) % n;
}
pair<long long, int> relax(int x, int y){
	vector<pair<long long, int>> temp;
	for(int i = -1; i <= 1; i++){
		temp.push_back(make_pair(dp[wrap(i+y)][x+1], wrap(i + y)));
	}
	sort(temp.begin(), temp.end());
	return temp[0];
}


long long solve(){
	//m->x, n->y
	for(int i = m-1; i >= 0; i--){
		for(int j = 0; j<n; j++){
			pair<long long, int> cur = relax(i, j);
			dp[j][i] = cur.first + arr[j][i];
			paths[j][i] = cur.second;
		}
	}
	long long mini = ll_max;
	int min_ind;
	for(int i = 0; i<n; i++){
		if(mini > dp[i][0]){
			mini = dp[i][0];
			min_ind = i;
		}
	}
	cout << min_ind + 1;
	for(int i = 0; i<m-1; i++){
		cout << ' '  << paths[min_ind][i] + 1;
		min_ind = paths[min_ind][i];
	}
	cout << endl;
	return mini;
}


int main(){
	while(cin >> n >> m){
		if(n + m == 0){
			break;
		}
		for(int i = 0; i<n; i++){
			for(int j = 0; j<m; j++){
				cin >> arr[i][j];
			}
		}
		cout << solve() << endl;
		memset(dp, 0, sizeof(dp));
		memset(paths, 0, sizeof(paths));
		memset(arr, 0, sizeof(arr));
	}
	return 0;
}