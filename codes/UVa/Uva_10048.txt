#include <iostream>
#include <string>
#include <queue>
#include <stack>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <iomanip>
#include <map>
#include <set>
#include <sstream>

#define int_max 0x3f3f3f3f
#define byte_max 0x3f 
#define cont continue
#define max_v 110

using namespace std;

int dp[max_v][max_v];
//int graph[max_v][max_v][max_v];

void floyd(int V){
	for(int i = 1; i <= V; i++){
		for(int j = 1; j <= V; j++){
			for(int k = 1; k<= V; k++){
				if(dp[j][i] != int_max && dp[i][k] != int_max){
					dp[j][k] = min(dp[j][k], max(dp[j][i], dp[i][k]));
				}
			}
		}
	}
}

int main(){
	
	int V, E, Q, kase = 0;
	while(cin >> V >> E >> Q){
		if(V + E + Q == 0) break;
		
		memset(dp, byte_max, sizeof(dp));
		//memset(graph, byte_max, sizeof(graph));
		
		for(int i = 0; i<V + 5; i++){
			dp[i][i] = 0;
		}
		
		
		for(int i = 0; i<E; i++){
			int s, d, w;
			cin >> s >> d >> w;
			
			dp[s][d] = w;
			dp[d][s] = w;
			
		}
		
		
		floyd(V);
		
		if(kase >= 1) cout << endl;
		
		cout << "Case #" << ++kase << endl;
		
		while(Q--){
			int s, d;
			cin >> s >> d;
			if(dp[s][d] == int_max && dp[s][d] == int_max){
				cout << "no path\n";
			}else{
				cout << min(dp[s][d], dp[d][s]) << endl;
			}
		}
		
		
		
	}
		
	
	
    return 0;
}
