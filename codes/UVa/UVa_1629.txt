#include <iostream>
#include <string>
#include <queue>
#include <stack>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <iomanip>
#include <map>
#include <set>
#include <sstream>

#define int_max 0x3f3f3f3f 
#define cont continue
#define max_v 30

using namespace std;

int n, m, k;
int dp[max_v][max_v][max_v][max_v];
int cherries[max_v][max_v][max_v][max_v]; 
bool vis[max_v][max_v][max_v][max_v];
vector<pair<int, int>> arr;
//string tabs = "";
int DP(int x1, int y1, int x2, int y2){
	
	int& cur = dp[x1][y1][x2][y2];
	
	//cout << tabs;
	//printf("%d %d %d %d %d\n", x1, y1, x2, y2, cur);
	
	
	
	if(cur || (cur == 0 && vis[x1][y1][x2][y2])) return cur;
	
	
		
	if(cherries[x1][y1][x2][y2] == 0){
		cur = int_max;
		return cur;
	}else if(cherries[x1][y1][x2][y2] == 1){
		vis[x1][y1][x2][y2] = true;
		return 0;
	}

	cur = int_max;
	
	for(int i = x1 + 1; i < x2; i++){
		cur = min(cur, DP(x1, y1, i, y2) + DP(i, y1, x2, y2) + abs(y2 - y1));
	}
	
	for(int i = y1 + 1; i < y2; i++){
		cur = min(cur, DP(x1, y1, x2, i) + DP(x1, i, x2, y2) + abs(x2 - x1));
	}
	
	
	return cur;
	
}


int main(){
	int kase = 0;
	while(scanf("%d %d %d", &n, &m, &k) == 3){
		memset(dp, 0, sizeof(dp));
		memset(cherries, 0, sizeof(cherries));
		memset(vis, false, sizeof(vis));
		arr.clear();
		
		if(k == 0){
			printf("Case %d: %d\n", ++kase, 0);
			cont;
		}

		for(int i = 0; i<k; i++){
			int x, y;
			scanf("%d %d", &x, &y);
			arr.push_back(make_pair(x, y));
		}
		
		for(int x1 = 0; x1<n; x1++){ //this whole thing is n^2 * m^2 * k
			for(int y1 = 0; y1<m; y1++){ //or at most n^3 * m^3 (k -> n*m)
				for(int x2 = x1 + 1; x2 <= n; x2++){ //which is 6.4 * 10^7
					for(int y2 = y1 + 1; y2 <= m; y2++){ //i think this precomputing is necessary
						for(int l = 0; l<k; l++){
							if(x1 < arr[l].first && arr[l].first <= x2 && y1 < arr[l].second && arr[l].second <= y2){
								cherries[x1][y1][x2][y2]++;
							}
						}
					}
				}
			}
		}
		
		printf("Case %d: %d\n", ++kase, DP(0, 0, n, m));
		
		
	}    
    
    
    return 0;
}
