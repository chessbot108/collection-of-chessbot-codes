
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 1000
#define pow_2(n) (1 << n)


using namespace std;

class disj_set {
	int parent[max_v], rank[max_v], n;
public:
	disj_set(int n) {
		this->n = n;
		make_set();
	}
	void make_set() {
		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
	}
	int find(int index) {
		if (index != parent[index]) {
			parent[index] = find(parent[index]);
		}
		return parent[index];
	}
	void link(int x_rep, int y_rep) {
		if (rank[x_rep] > rank[y_rep]) {
			parent[y_rep] = x_rep;
		}
		else {
			parent[x_rep] = y_rep;
			if (rank[x_rep] == rank[y_rep]) {
				rank[y_rep]++;
			}
		}
		
	}
	void Union(int x, int y) {
		int x_rep = find(x);
		int y_rep = find(y);
		link(x_rep, y_rep);
	}
};

vector<pair<int, int>> coor;
vector<pair<int, pair<int, int>>> edges;
int N[10], cost[10], V, E;
int sub[10][max_v];

int eucl_dist(int i, int j){
	int x = (coor[i].first - coor[j].first);
	int y = (coor[i].second - coor[j].second);
	return x*x + y*y;
}

int kruskal(disj_set& D, int total){
	
	for(auto cur : edges){
		int u = cur.second.first;
		int v = cur.second.second;
		int w = cur.first;
		
		if(D.find(u) != D.find(v)){
			D.Union(u, v);
			total += w; 
		}
		
		
	}
	
	return total;
	
}


int main(){
	int T;
	cin >> T;
	
	while(T--){
		cin >> V >> E;
		
		coor.clear();
		edges.clear();
		memset(N, 0, sizeof(N));
		memset(cost, 0, sizeof(cost));
		memset(sub, 0, sizeof(sub));
		
		for(int i = 0; i<E; i++){
			cin >> N[i] >> cost[i];
			for(int j = 0; j<N[i]; j++){
				cin >> sub[i][j];
				sub[i][j]--;
			}
		}
		
		
		for(int i = 0; i<V; i++){
			int x, y;
			cin >> x >> y;
			coor.push_back(make_pair(x, y));
		}
		
		for(int i = 0; i<V; i++){
			for(int j = i + 1; j < V; j++){
				edges.push_back(make_pair(eucl_dist(i, j), make_pair(i, j)));
			}
		}
		
		sort(edges.begin(), edges.end());
		
		int mini = int_max;
		
		for(int bin = 0; bin<pow_2(E); bin++){
			disj_set D(V);
			int total = 0;
			for(int j = 0; j<E; j++){
				if(bin&pow_2(j)){
					total += cost[j];
					for(int k = 1; k<N[j]; k++){
						D.Union(sub[j][k], sub[j][k - 1]);
					}
				}
			}
			
			mini = min(mini, kruskal(D, total));
			
			
		}
		
		
		cout << mini << endl;
		
		if(T > 0) cout << endl;
		
		
	}
	
	
	
	return 0;
}

