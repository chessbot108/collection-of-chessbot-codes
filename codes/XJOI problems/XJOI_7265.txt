
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <list>
#include <fstream>
#include <numeric>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 100100

using namespace std;

int parent[max_v], Rank[max_v], V, E;
vector<pair<long long, pair<int, int>>> edges;


int find(int n){
	if(n != parent[n]){
		parent[n] = find(parent[n]);
	}
	return parent[n];
}

void Union(int a, int b){
	a = find(a);
	b = find(b);
	if(a == b) return;
	if(a < b) swap(a, b);
	
	Rank[a] += Rank[b];
	parent[b] = a;
	
}


long long kruskal(){
	sort(edges.begin(), edges.end());
	
	long long total = 0L;
	for(int i = 0; i<E; i++){
		long long w = edges[i].first;
		int u = edges[i].second.first;
		int v = edges[i].second.second;
		
		if(find(u) != find(v)){
			total += w;
			Union(u, v);
		}
	}
	
	return total;
	
}

int main() {
  	
  	iota(parent, parent + max_v, 0);
  	fill(Rank, Rank + max_v, 1);
  	
  	cin >> V >> E;
  	
  	for(int i = 0; i<E; i++){
  		long long w;
  		int s, d;
  		cin >> s >> d >> w;
		
		edges.push_back(make_pair(w, make_pair(s, d)));
		  	
	}
	
	cout << kruskal();
  	
  	
  	return 0;
}

