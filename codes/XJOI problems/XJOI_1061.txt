
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <map>
#include <fstream>
#include <utility>
#include <vector>
#include <ctime>
#include <climits>
#include <sstream>
#include <set>
#include <cstring>
#include <unordered_map>

#define cont continue
#define int_max 0x3f3f3f3f
#define max_v 1010
#define byte_max 0x3f

using namespace std;

struct node{
	int dist, key;
	
	bool operator < (const node& b) const{
		return (dist > b.dist) || (dist == b.dist && key > b.key);
	}
};

bool vis[max_v];
int dist[max_v], pred[max_v];
int edges[max_v][max_v];
int V, E, s, d;

int dijkstra(){
	memset(dist, byte_max, sizeof(dist));
	memset(vis, false, sizeof(vis));
	
	dist[s] = 0;
	
	node src{0, s};
	priority_queue<node> pq;
	pq.push(src);
	
	while(!pq.empty()){
		node cur = pq.top(); pq.pop();
		int key = cur.key;
		
		if(key == d) return cur.dist;
		if(vis[key]) cont;
		
		vis[key] = true;
		
		for(int i = 1; i<=V; i++){
			if(edges[key][i] == int_max) cont;
			
			int cost = cur.dist + edges[key][i];
			
			if(cost < dist[i] || (cost == dist[i] && key < pred[i])){
				dist[i] = cost;
				pred[i] = key;
				node a = {cost, i};
				pq.push(a);
			}
			
		}
		
		
	}
	return -1;	
}

void recur(int prev){
	if(prev == s){
		cout << s;
		return;
	}
	
	recur(pred[prev]);
	
	cout << " " << prev;
	
	
}




int main(){
	memset(edges, byte_max, sizeof(edges));
	cin >> s >> d;
	cin >> V >> E;
	for(int i = 0; i<E; i++){
		int u, v, w;
		cin >> u >> v >> w;
		
		edges[u][v] = w;
		edges[v][u] = w;
		
		
		
	}
	
	cout << dijkstra() << endl;
	recur(d);
	
	return 0;
}

