
#include <iostream>
#include <fstream>
#include <algorithm>
#include <queue>
#include <vector>
#include <utility>
#include <map>
#include <stack>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#define cont continue
#define cin fin
#define cout fout
#define N 8
using namespace std;

ifstream fin("lineup.in");
ofstream fout("lineup.out");

int n;
bool visited[10] = { false };
bool board[10][10];
string names[] = {
	"Beatrice",
	"Belinda",
	"Bella",
	"Bessie",
	"Betsy",
	"Blue",
	"Buttercup",
	"Sue"
};
vector<pair<int, int>> rules;
vector<string> ans;

int converse_ind(string a) {
	for (int i = 0; i < N; i++) {
		if (names[i] == a) {
			return i;
		}
	}
}
bool check(vector<string> vec) {
	memset(board, false, sizeof(board));
	for (int i = 0; i < N - 1; i++) {
		int x = converse_ind(vec[i]);
		int y = converse_ind(vec[i + 1]);
		board[x][y] = true;
		board[y][x] = true;
	}
	for (int i = 0; i < n; i++) {
		if (!board[rules[i].first][rules[i].second]) {
			return false;
		}
	}
	return true;
}
void dfs() {
	if (ans.size() == N) {
		if (check(ans)) {
			for (int i = 0; i < N; i++) {
				cout << ans[i] << endl;
			}
			exit(0);
		}
		return;
	}

	for (int i = 0; i < N; i++) {
		if (!visited[i]) {
			visited[i] = true;
			ans.push_back(names[i]);
			dfs();
			ans.pop_back();
			visited[i] = false;
		}
	}
}
int main() {
	string must, be, milked, beside;
	cin >> n;
	for (int i = 0; i < n; i++) {
		string name1, name2;
		cin >> name1 >> must >> be >> milked >> beside >> name2;
		rules.push_back(make_pair(converse_ind(name1), converse_ind(name2)));
	}

	dfs();


	fin.close();
	fout.close();
	return 0;
}
