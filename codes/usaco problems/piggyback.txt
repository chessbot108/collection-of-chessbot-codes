
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <map>
#include <fstream>
#include <utility>
#include <vector>
#include <ctime>
#include <climits>
#include <sstream>
#include <set>
#include <cstring>
#include <unordered_map>

#define cont continue
#define int_max 0x3f3f3f3f
#define max_v 40400
#define byte_max 0x3f
#define cin fin
#define cout fout
using namespace std;

ifstream fin("piggyback.in");
ofstream fout("piggyback.out");


struct node{
	int dist, key;
	bool operator < (const node & b) const{
		return dist > b.dist;
	}
};

struct edge{
	int u, v;
	bool operator < (const edge& b) const{
		return u < b.u;
	}
} edges[max_v*2];

int b_dist[max_v], e_dist[max_v], end_dist[max_v];
int U[max_v*2];
bool vis[max_v];
int b, e, p, V, E;

int get_ind(int u){
	return lower_bound(U, U + E*2, u) - &U[0];
}


int dijkstra(int dist[max_v], int src){
	
	memset(vis, false, sizeof(vis));
	
	dist[src] = 0;
	
	node s {0, src};
	priority_queue<node> pq;
	pq.push(s);
	
	while(!pq.empty()){
		node cur = pq.top(); pq.pop();
		int key = cur.key;
		
		if(vis[key]) cont;
		
		vis[key] = true;
		
		for(int i = get_ind(key); edges[i].u == key; i++){
			int v = edges[i].v;
			if(dist[v] > dist[key] + 1 && !vis[v]){
				dist[v] = dist[key] + 1;
				node a {dist[v], v};
				pq.push(a);
			}
		}
		
		
	}
	
}


int main(){
	
	cin >> b >> e >> p >> V >> E;
	
	for(int i = 0; i<E; i++){
		int s, d;
		cin >> s >> d;
		edges[i*2].u = s; edges[i*2 + 1].v = s;
		edges[i*2].v = d; edges[i*2 + 1].u = d;
	}
	
	sort(edges, edges + E*2);
	
	for(int i = 0; i<E*2; i++){
		U[i] = edges[i].u;
	}
	
	
	memset(b_dist, byte_max, sizeof(b_dist));
	memset(e_dist, byte_max, sizeof(e_dist));
	memset(end_dist, byte_max, sizeof(end_dist));
	
	
	
	dijkstra(b_dist, 1);
	dijkstra(e_dist, 2);
	dijkstra(end_dist, V);
	
	int mini = int_max;
	
	for(int i = 1; i<=V; i++){
		//printf("%d: b_dist -> %d, e_dist -> %d, end_dist -> %d\n", i, b_dist[i], e_dist[i], end_dist[i]);
		mini = min(mini, (b_dist[i] * b) + (e_dist[i] * e) + (end_dist[i] * p));
	}
	
	cout << mini;
	
	return 0;
}

