/**
NAME: weiming2
LANG: C++14
TASK: relocate
**/
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <unordered_set>
#include <string>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 11000
#define N 6
//#define cin fin
//#define cout fout
using namespace std;

ifstream fin("relocate.in");
ofstream fout("relocate.out");

struct edge{
	int u, v, w;
	bool operator < (const edge& b) const{
		return u < b.u;
	}
} edges[max_v * 10]; //(limit on E) * 2 (50000 * 2)

struct node{
	int dist,  key;
	bool operator < (const node& b) const{
		return dist > b.dist;
	}
};


int market[N], U[max_v * 10], dist[N][max_v], floyd[N][N];
bool taken[N], vis[max_v];
int V, E, K, mini = int_max;

vector<int> arr;

void comp_floyd(){	
	for(int i = 0; i<K; i++)
		for(int j = 0; j<K; j++)
			floyd[i][j] = dist[market[i]][market[j]];
		
	for(int k = 0; k<K; k++){
		for(int i = 0; i<K; i++){
			for(int j = 0; j<K; j++){
				if(i == j || j == k || k == i) cont;
				floyd[i][j] = min(floyd[i][j], floyd[i][k] + floyd[k][j]);
				//printf("%d %d -> %d\n", market[i], market[j], floyd[i][j]);
			}
		}
	}
	
}


int get_dist(int src){
	int total = dist[market[arr[0]]][src];
	//cout << src;
	for(int i = 0; i<arr.size() - 1; i++){
		//printf("%3d", i);
		total += floyd[arr[i]][arr[i + 1]];
	}
	//cout << ": " << dist[market[arr[arr.size() - 1]]][src] + total << endl;
	return total + dist[market[arr[arr.size() - 1]]][src];
}


void dfs(int src){
	if(arr.size() == K){
		
		mini = min(mini, get_dist(src));
		
		return ;
	}
	
	for(int i = 0; i<K; i++){
		if(!taken[i]){
			taken[i] = true;
			arr.push_back(i);
			dfs(src);
			arr.pop_back();
			taken[i] = false;
		}
	}
	
}


int get_ind(int u){
	return lower_bound(U, U + E*2, u) - &U[0];
}


void dijkstra(int ind){
	int src = market[ind];
	memset(vis, false, sizeof(vis));
	dist[src][src] = 0;
	
	node s {0, src};
	priority_queue<node> pq;
	pq.push(s);
	
	while(!pq.empty()){
		node cur = pq.top(); pq.pop();
		int key = cur.key;
		
		if(vis[key]) cont;
		
		vis[key] = true;
		
		//printf("%d %d\n", key, cur.dist);
		
		for(int i = get_ind(key); edges[i].u == key; i++){
			int v = edges[i].v, w = edges[i].w;
			
			if(dist[src][v] > dist[src][key] + w){
				dist[src][v] = dist[src][key] + w;
				node a {dist[src][v], v};
				pq.push(a);
			}	
		}	
	}
	//puts("");
}

int main() {
	cin >> V >> E >> K;
	
	for(int i = 0; i<K; i++)
		cin >> market[i];
	
	
	for(int i = 0; i<E; i++){
		int s, d, w;
		cin >> s >> d >> w;
		edges[i*2].u = edges[i*2 +1].v = s;
		edges[i*2].v = edges[i*2 +1].u = d;
		edges[i*2].w = edges[i*2 +1].w = w;
	}
	
	sort(edges, edges + E*2);
	
	for(int i = 0; i<E*2; i++)
		U[i] = edges[i].u;
	
	
	memset(dist, byte_max, sizeof(dist)); //init dist to inf
	
	for(int i = 0; i<K; i++)
		dijkstra(i);
	
	memset(vis, false, sizeof(vis));
	
	for(int i = 0; i<K; i++)
		vis[market[i]] = true; //reusing vis array to store towns
	
	comp_floyd();
	
	
	for(int i = 1; i<=V; i++){
		if(vis[i]) cont;
		
		dfs(i);
	}
	
	cout << mini;
	
  	return 0;
}


