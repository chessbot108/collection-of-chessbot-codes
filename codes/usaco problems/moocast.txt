
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <map>
#include <fstream>
#include <utility>
#include <vector>
#include <ctime>
#include <climits>
#include <sstream>
#include <set>
#include <cstring>
#include <unordered_map>

#define cont continue
#define int_max 0x3f3f3f3f
#define max_v 220
#define byte_max 0x3f
#define cin fin
#define cout fout
using namespace std;

ifstream fin("moocast.in");
ofstream fout("moocast.out");

struct cow{
	double x, y;
	double dist;
} cows[max_v];

bool edges[max_v][max_v], vis[max_v];
int n;

bool can_reach(cow a, cow b){
	double x = double(abs(a.x - b.x));
	double y = double(abs(a.y - b.y));
	
	double dist = sqrt(x*x + y*y);
	
	//printf("%llf %llf %llf\n%llf %llf %llf\n%llf and %llf\n", a.x, a.y, a.dist, b.x, b.y, b.dist, a.dist, dist);
	
	return a.dist >= dist;
}

int dfs(int cur){
	if(vis[cur]) return 0;
	
	vis[cur] = true;
	int total = 1;
	//cout << cur << " ";
	for(int i = 0; i<n; i++){
		if(edges[cur][i] && i != cur){
			total += dfs(i);
		}
	}
	
	return total;
}


int main(){
	cin >> n;
	for(int i = 0; i<n; i++){
		cin >> cows[i].x >> cows[i].y >> cows[i].dist;
	}
	
	for(int i = 0; i<n; i++){
		for(int j = 0; j<n; j++){
			if(i == j) cont;
			edges[i][j] = can_reach(cows[i], cows[j]);
			//cout << edges[i][j] << " ";	
		}
		//cout << endl;
	}
	
	int maxi = -1;
	
	for(int i = 0; i<n; i++){
		memset(vis, false, sizeof(vis));
		maxi = max(maxi, dfs(i));
		//cout << endl;
	}
	
	cout << maxi;
	
	
	return 0;
}

