these are the guidelines for the groupd during the test.

1. don't use: "#include <bits/stdc++.h>". manually include all headers by hand. this is to be safe in case the compiler doesn't work
2. submit c++11. also set your compilers to be c++11 during the test
3. try to make as clean codes as possible
4. if the i make a bad call as the leader, please tell me why i'm wrong and explain. this can help avoid things like #9 from TC MOCk 2.
5. don't code a problem you don't understand, if the problem if too hard please tell the group
6. have code checked x2 before submission. if the problem is free, you can do it yourself
    a. run at least 3 samples (if applicable) on it
    b. make sure max_v/max constant is correct
    c. beware of long long overflow
    d. beware of small typoes that might get overlooked. e.g. a '-' and a '^'
7. if you think you can do a problem, speak up. we can help avoid things like me being an idoit and not letting daniel do 9.
8. please don't slack off
9. please make sure your idea works before coding

things that would be nice:
1. write your name at the top if you wrote the code:
//code by <name>
2. putting down the samples (input AND output) at the bottom of the code (these ones are for a "a+b" code):

/**
input:
3 4
output:
7

input:
123 111
output: 
234
**/

apply when doing hard problems

1. paperwork. never skip this step
2. make sure the time/mem complexity works
3. if you are sure these 2 steps are right, code it
4. debugging:
    a. if you are seg faulting, you can use either printf's or assert statements to help you
        i. an assert statement, under the #include <cassert>, will kill the program if the expression give is false. e.g.
          assert(1 > 2); will kill the program. this is helpful for "sanity checks"
    b. if you are wrong answering (on samples) make sure you solved the sample right. then go through and try to imagine how your code works with the input
    c. don't forget to comment out debugs
5. submission. have another person go through the problem with different test cases
6. AC. self explanatory

let's do good this test!!!





