
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3fffffff
#define byte_max 0x3f
#define max_v 220

using namespace std;

class DSU{
	int parent[max_v];
	public:
		DSU(int V){
			for(int i = 0; i<=V; i++) this->parent[i] = i;
		}
		
		int find(int n){
			if(parent[n] != n) parent[n] = this->find(parent[n]);
			return parent[n];
		}
	
		void Union(int a, int b){
			a = this->find(a), b = this->find(b);
			if(a == b) return;
			if(a > b) swap(a, b);
			parent[b] = a;
		}
};

int graph[max_v][max_v];
int V;
vector<pair<int, int> > points;

int dist(int i, int j){
	int x = points[i].first - points[j].first;
	int y = points[i].second - points[j].second;
	return x*x + y*y;
}

void comp_graph(){
	for(int i = 0; i<V; i++){
		for(int j = 0; j<V; j++){
			graph[i][j] = dist(i, j);
		}
	}
}

bool check(int maxi){
	DSU D(V);
	for(int i = 0; i<V; i++){
		for(int j = 0; j<V; j++){
			if(graph[i][j] <= maxi) D.Union(i, j);
		}
	}
	
	return (D.find(0) == D.find(1));
}

int bin_search(int l, int r){
	if(l >= r) return l;
	
	int mid = (l + r)/2;
	
	if(check(mid)){
		return bin_search(l, mid);
	}else{
		return bin_search(mid + 1, r);
	}
	
}

int main() {
  	int kase = 0;
  	while(scanf("%d", &V)){
  		if(V == 0) break;
  		memset(graph, 0, sizeof(graph));
		points.clear();
		
		for(int i = 0; i<V; i++){
			int a, b;
			scanf("%d%d", &a, &b);
			points.push_back(make_pair(a, b));
		}
		
		comp_graph();
		
		printf("Scenario #%d\nFrog Distance = %.3lf\n\n", ++kase, sqrt(double(bin_search(0, (int)1e6 + 10))));
		
		
	}
  	
  	
  	
  	return 0;
}

