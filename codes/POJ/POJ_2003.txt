
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>
#include <deque>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 1100

using namespace std;


struct person{
	string name;
	struct person * parent;
	list<struct person*> children;
	person(){
		parent = NULL;	
	}
	
	person (string name, struct person* dad){
		this->name = name;
		this->parent = dad;
	}
};


struct person* root;
map<string, struct person*> ID;


void print(int len, struct person* cur){
	if(cur){
		for(int i = 0; i<len; i++){
			cout << "+";
		}
		cout << cur->name << endl;
		for(list<struct person*>::iterator it = cur->children.begin(); it != cur->children.end(); it++){
			print(len + 1, *it);
		}
	}
}

void hires(string dad){
	string temp;
	cin >> temp;
	cin >> temp;
	
	struct person* cur = new person(temp, ID[dad]);
	ID[dad]->children.push_back(cur);
	ID[temp] = cur;
}

void fire(){
	string name;
	cin >> name;
	
	struct person* cur = ID[name];
	ID.erase(name);
	
	while(!cur->children.empty()){
		cur->name = cur->children.front()->name;
		ID[cur->name] = cur;
		cur = cur->children.front();
	}
	
	cur->parent->children.remove(cur);
	delete cur;
}


int main() {
	//freopen("a_bunch_of_points.in", "r", stdin);
  	string CEO;
  	cin >> CEO;
  	
  	root = new person(CEO, NULL);
  	ID[CEO] = root;
  	
  	string com;
  	while(cin >> com){
  		if(com == "print"){
  			print(0, root);
			for(int i = 0; i<60; i++){
				cout << "-";
			}	
			cout << endl;
		}else if(com == "fire"){
			fire();
		}else{
			hires(com);
		}
	}
  	
  	return 0;
}

