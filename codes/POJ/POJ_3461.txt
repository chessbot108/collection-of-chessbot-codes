
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3fffffff
#define byte_max 0x3f
#define max_v 220

using namespace std;

char W[11000], T[1100000];
int fail_ptr[1100000], n, m;

void precomp(){ 
    int len = 0; 
    int i = 1; 
    fail_ptr[0] = 0;
    
    while(i < n){ 
        if(W[i] == W[len]){ 
            len++; 
            fail_ptr[i] = len; 
            i++; 
        }else{ 
            if (len != 0) { 
                len = fail_ptr[len - 1]; 
            }else{ 
                fail_ptr[i] = 0; 
                i++; 
            } 
        } 
    } 
} 
  

int KMP(){ 
  	int cnt = 0;
      
    int i = 0; // index for txt[] 
    int j = 0; // index for pat[] 
    
    precomp();
	
	while (i < n) { 
        if (W[j] == T[i]) { 
            j++; 
            i++; 
        } 
  
        if (j == m) { 
            cnt++;
			j = fail_ptr[j - 1]; 
        }else if(i < n && W[j] != T[i]) { 
            if (j != 0) 
                j = fail_ptr[j - 1]; 
            else
                i++; 
        } 
    } 
    return cnt;
} 
  

int main() {
  	int kase;
  	scanf("%d", &kase);
  	while(kase--){
  		//memset(W, 0, sizeof(W));
		//memset(T, 0, sizeof(T));
		memset(fail_ptr, 0, sizeof(fail_ptr));
		scanf("%s%s", W, T);
		n = strlen(T);
		m = strlen(W);
		
		printf("%d\n", KMP());
			
	}
  	
  	
  	
  	return 0;
}

