#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <iomanip>
#include <vector>
#include <queue>
#include <bitset>
#include <string>
#include <sstream>
#include <set>

#define cont continue
#define int_max 0x3f3f3f3f
#define max_v 11000

using namespace std;

class DSU{
	public:
		int parent[max_v], rank[max_v];
		DSU(int n){
			for(int i = 0; i<=n; i++){
				parent[i] = i;
				rank[i] = 1;
 			}
		}
	
		int find(int n){
			if(parent[n] != n){
				parent[n] = find(parent[n]);
			}
			return parent[n];
			
		}
		
		void Union(int a, int b){
			a = this->find(a), b = this->find(b);
			if(a > b) swap(a, b);
			parent[b] = a;
			rank[a] += rank[b];
		}
		
};


struct edge{
	int u, v, w;
	edge(int a, int b, int c){
		u = a, v = b, w = c;
	}
	
	edge(){}
	
	bool operator < (const edge& b) const{
		return w < b.w;
	}
} edges[15500];


vector<int> used;

int kruskal(int V, int E){
	DSU D = DSU(V);
	int maxi = -1;
	for(int i = 0; i<E; i++){
		int u = edges[i].u, v = edges[i].v, w = edges[i].w;
		u = D.find(u);
		v = D.find(v);
		
		if(u != v){
			D.Union(u, v);
			used.push_back(i);
			if(w > maxi){
				maxi = w;
			}
		}
		
	}
	
	return maxi;
}

int main(){
	int V, E;
	scanf("%d%d", &V, &E);
	
	for(int i = 0; i<E; i++){
		int a, b, c;
		scanf("%d%d%d", &a, &b, &c);
		edges[i] = edge(a, b, c);
	}
	
	sort(edges, edges + E);
	
	printf("%d\n", kruskal(V, E));
	printf("%d\n", used.size());
	for(int i = 0; i<used.size(); i++){
		printf("%d %d\n", edges[used[i]].u, edges[used[i]].v);
	}
	
	
	return 0;
}


