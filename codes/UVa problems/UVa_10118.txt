#include <iostream>
#include <vector>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <set>

#define int_max 0x3f3f3f3f
#define byte_min 0x8f 
#define cont continue
#define max_v 50
using namespace std;

int dp[max_v][max_v][max_v][max_v]; //i'm lazy, look at the macros
multiset<int> basket;
int arr[max_v][5];
int n;

inline void call(int a, int b, int c, int d, int changex, int changey, int& cur);

int DP(int a, int b, int c, int d){
	int& cur = dp[a][b][c][d];
	if(cur >= 0) return cur;
	
	cur = 0;
	
	if(basket.size() >= 5) return cur;
	
	call(a + 1, b, c, d, a, 0, cur);
	call(a, b + 1, c, d, b, 1, cur);
	call(a, b, c + 1, d, c, 2, cur);
	call(a, b, c, d + 1, d, 3, cur);
	
	return cur;
}

inline void call(int a, int b, int c, int d, int changex, int changey, int& cur){
	
	if(changex < n){
		if(basket.find(arr[changex][changey]) != basket.end()){
			basket.erase(arr[changex][changey]);
			cur = max(cur, DP(a, b, c, d) + 1);
			basket.insert(arr[changex][changey]);
		}else{
			basket.insert(arr[changex][changey]);
			cur = max(cur, DP(a, b, c, d));
			basket.erase(arr[changex][changey]);
		}
	}
}

int main(){
	while(cin >> n){
		if(n == 0) break;
		
		basket.clear();
		memset(arr, 0, sizeof(arr));
		memset(dp, byte_min, sizeof(dp));
		
		for(int i = 0; i<n; i++){
			for(int j = 0; j<4; j++){
				cin >> arr[i][j];
			}
		}
		
		cout << DP(0, 0, 0, 0) << endl;
	}
    
    return 0;
}