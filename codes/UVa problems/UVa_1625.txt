
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>
#include <ctime>
#include <cassert>
#include <deque>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 5500
#define sigma 130
using namespace std;

char s[max_v], t[max_v];
int dp[max_v][max_v], len[max_v][max_v], s1[sigma], s2[sigma], e1[sigma], e2[sigma];
int n, m;

void deconstruct(){
	for(int i = 0; i<sigma; i++){
		s1[i] = int_max;
		s2[i] = int_max;
		e1[i] = -1;
		e2[i] = -1;
	}
}

void precomp(){
	for(int i = 'A'; i<='Z'; i++){
		for(int j = 1; j<=max(n, m); j++){
			if(j <= n){
				if(i == s[j]){
					s1[i] = min(s1[i], j);
					e1[i] = max(e1[i], j);
				}
			}
			if(j <= m){
				if(i == t[j]){
					s2[i] = min(s2[i], j);
					e2[i] = max(e2[i], j);
				}
			}
		}
	}
}

int DP(){
	dp[0][0] = 0;
	len[0][0] = 0;
	
	for(int i = 0; i<=n; i++){
		for(int j = 0; j<=m; j++){
			if(!(i || j)) cont;
			dp[i][j] = int_max;
			if(i){
				dp[i][j] = min(dp[i][j], dp[i - 1][j] + len[i - 1][j]);
				len[i][j] = len[i - 1][j];
				int cur = s[i];
				if(i == s1[cur] && j < s2[cur])len[i][j]++;
				if(i == e1[cur] && j >= e2[cur]) len[i][j]--;
			}
			
			if(j){
				dp[i][j] = min(dp[i][j], dp[i][j - 1] + len[i][j - 1]);
				len[i][j] = len[i][j - 1];
				int cur = t[j];
				
				if(j == s2[cur] && i < s1[cur]) len[i][j]++;
				if(j == e2[cur] && i >= e1[cur]) len[i][j]--;
			}
		}
	}
	
	
	return dp[n][m];
}


int main() {
	
	int T;
	scanf("%d", &T);
	
	while(T--){
		scanf("%s", 1 + s);
		scanf("%s", 1 + t);
		n = strlen(1 + s);
		m = strlen(1 + t);
		deconstruct();
		
		precomp();
		
		printf("%d\n", DP());
	}
	
	
	
	
  	return 0;
}

