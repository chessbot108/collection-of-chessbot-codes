
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <unordered_map>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 110
#define max_e 50050

using namespace std;

double dp[max_v][max_v];
double x[max_v], y[max_v], z[max_v], r[max_v];

double eucl_dist(int i, int j){
	return sqrt(pow(x[i] - x[j], 2) + pow(y[i] - y[j], 2) + pow(z[i] - z[j], 2));
}

double floyd(int V){
	
	for(int i = 0; i<V; i++){
		for(int j = 0; j<V; j++){
			if(i == j){ dp[i][j] == 0; cont;}
			
			double dist = eucl_dist(i, j);
			
			if(dist <= r[i] + r[j]){
				dp[i][j] = 0.0;
			}else{
				dp[i][j] = dist - (r[i] + r[j]);
			}
			
			
		}
	}
	
	for(int k = 0; k<V; k++){
		for(int i = 0; i<V; i++){
			for(int j = 0; j<V; j++){
				if(i == j || j == k || i == k) cont;
				dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);
				//printf("%2.0lf", dp[i][j]);	
			}
			//cout << endl;
		}
		//cout << endl;
	}
	
	
	
	return dp[V - 1][V - 2];
}


int main() {
	
	int V, kase = 0;
	while(cin >> V){
		if(V == -1) break;
		
		memset(x, 0, sizeof(x));
		memset(y, 0, sizeof(y));
		memset(z, 0, sizeof(z));
		memset(r, 0, sizeof(r));
		memset(dp, 0, sizeof(dp));
		
		for(int i = 0; i<V + 2; i++){
			if(i < V){
				scanf("%lf%lf%lf%lf", &x[i], &y[i], &z[i], &r[i]);
			}else{
				scanf("%lf%lf%lf", &x[i], &y[i], &z[i]); r[i] = 0;
			}
		}
		
		printf("Cheese %d: Travel time = %.0lf sec\n", ++kase, floyd(V + 2) * 10);
		
	}
	
	  	
  	return 0;
}

