
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <unordered_map>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3fffffff
#define byte_max 0x3f
#define max_v 110

using namespace std;

const int row[] = {0, 0, 1, -1};
const int col[] = {1, -1, 0, 0};

vector<pair<int, pair<int, int>>> nodes;
int dp[max_v][max_v]; //dp[i][j] = min(all adjacent nodes that are less that it) + 1;
int arr[max_v][max_v], n, m;

void relax(int x, int y, int ind){
	int c_x = x + row[ind];
	int c_y = y + col[ind];
	
	if(c_x < 0 || c_y < 0 || c_x >= n || c_y >= m || arr[c_x][c_y] >= arr[x][y]){
		return ;
	}
	
	dp[x][y] = max(dp[x][y], dp[c_x][c_y] + 1);
	
}


int main() {
	int T;
	cin >> T;
	while(T--){
		string NAME;
		cin >> NAME;
		cin >> n >> m;
		
		for(int i = 0; i<n; i++){
			for(int j = 0; j<m; j++){
				cin >> arr[i][j];
				nodes.push_back(make_pair(arr[i][j], make_pair(i, j)));
			}
		}
		
		sort(nodes.begin(), nodes.end());
		
		dp[nodes[0].second.first][nodes[0].second.second] = 0;
		int maxi = -1;
		for(int i = 1; i<nodes.size(); i++){
			int w = nodes[i].first;
			int x = nodes[i].second.first;
			int y = nodes[i].second.second;
			
			for(int j = 0; j<4; j++){
				relax(x, y, j);
			}
			maxi = max(maxi, dp[x][y]);
			//printf("%d %d %d %d %d\n", x + 1, y + 1, w, dp[x][y], maxi);
		}
		
		cout << NAME + ": " << maxi + 1 << endl;
		
		memset(dp, 0, sizeof(dp));
		memset(arr, 0, sizeof(arr));
		nodes.clear();
		
	}
	
	
	
  	return 0;
}