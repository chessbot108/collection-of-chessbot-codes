#include <iostream> //cin, cout
#include <stack> //stack
#include <queue> //queue
#include <vector> //vector
#include <cstdio> //printf
#include <cstring> //memset
#include <cmath> //abs
#include <algorithm> //sort, swap, min, max
#include <fstream> //ifstream, ofstream
#include <iomanip> //fixed, setprecsion(), hex, oct, dec, boolalpha, noboolalpha
#define int_max 0x3fffffff
#define max_v 1010
#define cont continue
#define BLACK -1
#define GRAY 0
#define WHITE 1
using namespace std;
//to do, longest path algorithm

int Graph[max_v][max_v];
stack <int> sorted_nodes;
int time;
struct node{
	int color;
	int disc;
	int fini;
	int pred;
}arr[max_v];
int dist[max_v];
void set_graph(int V){
	for(int i = 0; i<V; i++){
		for(int j = 0; j<V; j++){
			Graph[i][j] = int_max;
		}
	}
}
void add_edge(int u, int v, int w){
	Graph[u][v] = w;
}

int get_edge(int u, int v){
	return Graph[u][v];	
}


void initalize_single_source(int n) {
	for (int i = 0; i < n; i++) {
		arr[i].pred = i;
		arr[i].color = WHITE;
		dist[i] = -1*int_max;
	}
	
}

bool dfs(int u, int n) {//returns a cycle
	time++;
	arr[u].disc = time;
	arr[u].color = GRAY;
	bool no_cyc = true;
	for (int i = 0; i < n; i++) {
		if (get_edge(u, i) != int_max) {
			if (arr[i].color == GRAY) {
				no_cyc = false;
			}
			else if (arr[i].color == WHITE) {
				arr[i].pred = u;
				no_cyc &= dfs(i, n);
			}
		}
	}
	time++;
	arr[u].fini = time;
	arr[u].color = BLACK;
	sorted_nodes.push(u);
	return no_cyc;
}

bool visit(int n) {
	initalize_single_source(n);
	time = 0;
	bool ans = true;
	for (int i = 0; i < n; i++) {
		if (arr[i].color == WHITE) {
			ans &= dfs(i, n);
		}
	}
	return ans;
}

void longest_path(int src, int V){
	bool temp = visit(V);
	dist[src] = 0;
	while(!sorted_nodes.empty()){
		
		int cur = sorted_nodes.top();
		sorted_nodes.pop();
		if(dist[cur] != int_max){
			for(int i = 0; i<V; i++){
				if(i == cur) cont;
				if(get_edge(cur, i) != int_max && dist[i] < get_edge(cur, i) + dist[cur]){
					dist[i] = dist[cur] +  get_edge(cur, i);
				}
			}
		}
	}
	cout << endl;
}

int main() {
  int V, E;
  cin >> V >> E;
  set_graph(V);
  for(int i = 0; i<E; i++){
	int s, d, w;
	cin >> s >> d >> w;
	s--; //1-index -> 0-index
	d--;
	add_edge(s, d, w);
  }
  for(int i = 0; i<V; i++){
 	longest_path(i, V);
 	for(int j = 0; j<V; j++){
 		if(dist[j] == 1*int_max){
 			printf("node %d cannot reach node %d\n", i+1, j+1);
		 }else{
		 	printf("dist from node %d to node %d is %d\n", i+1, j+1, dist[j]);
		 }
	 }
  } 
  return 0;
}
