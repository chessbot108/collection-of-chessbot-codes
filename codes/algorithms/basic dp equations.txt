longest path in DAG:

dp[i] -> max path that ends at node i

topo sort

if(edge(i, j)){
	dp[i] = max(dp[i], dp[j] + 1)
}

this also applies to longest increasing subsequence, longest snowboard

LCS

dp[i][j] -> max repeating letters between the first i letters of S1 and j letters of S2.

dp[i][j] = max(dp[i][j], dp[i - 1][j], max[i][j - 1])

if(S1[i] == S2[j])
	dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1)

knapsack

dp[i] -> max value obtained with a range of i

if(arr[j] < i)
	dp[i] = max(dp[i], dp[i - arr[j]] + val[j])

