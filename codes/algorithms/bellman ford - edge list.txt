// xjoi_algoithms.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <map>
#include <fstream>
#include <utility>
#include <vector>
#include <ctime>
#include <climits>
#define cont continue
#define int_max 0x3fffffff
#define cin fin
#define max_v 1010
using namespace std;
ifstream fin("textfile2.txt");
struct node {
	int dist;
	int pred;
} arr[max_v];
void relax(int u, int v, int w) {
	if (arr[v].dist > arr[u].dist + w) {
		arr[v].dist = arr[u].dist + w;
		arr[v].pred = u;
	}
}
void intitialize_single_source(int n, int src) {
	for (int i = 0; i < n; i++) {
		arr[i].dist = int_max;
		arr[i].pred = -1;
	}
	arr[src].dist = 0;
}
bool bellman_ford(int src, int n, int E, vector<pair<int, int>> edge_vert, vector<int> edge_weight) { //returns whether or not there is a negative loop, results of path finding are stored in arr
	intitialize_single_source(n, src);
	for (int i = 0; i < n - 1; i++) {
		for (int j = 0; j < E; j++) {
			relax(edge_vert[j].first, edge_vert[j].second, edge_weight[j]);
		}
	}
	for (int i = 0; i < E; i++) {
		int u = edge_vert[i].first;
		int v = edge_vert[i].second;
		int w = edge_weight[i];
		if (arr[v].dist > arr[u].dist + w) {
			return false;
		}
	}
	return true;
}
int main()
{
	int V, E, src;
	vector<pair<int, int>> edge_vert;
	vector<int> edge_weight;
	cin >> V >> E >> src;
	src--; //0-index
	for (int i = 0; i < E; i++) {
		int s, d, w;
		cin >> s >> d >> w;
		s--;
		d--;
		edge_vert.push_back(make_pair(s, d));
		edge_weight.push_back(w);
	}
	if (bellman_ford(src, V, E, edge_vert, edge_weight)) {
		for (int i = 0; i < V; i++) {
			if (i != src)
				cout << "shortest distance from node " << i + 1 << " to " << src + 1 << " is: " << arr[i].dist << endl;
		}
	}
	else {
		cout << "no sol, neg weight cycle" << endl;
	}
	return 0;
}

