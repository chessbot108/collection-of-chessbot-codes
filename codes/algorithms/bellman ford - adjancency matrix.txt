// xjoi_algoithms.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <map>
#include <fstream>
#include <utility>
#include <vector>
#include <ctime>
#include <climits>
#define cont continue
#define int_max 0x3fffffff
#define max_v 1010
using namespace std;
struct node {
	int dist;
	int pred;
} arr[max_v];
int Graph[max_v][max_v];
void relax(int u, int v) {
	if (arr[v].dist > arr[u].dist + Graph[u][v]) {
		arr[v].dist = arr[u].dist + Graph[u][v];
		arr[v].pred = u;
	}
}
void intitialize_single_source(int n, int src) {
	for (int i = 0; i < n; i++) {
		arr[i].dist = int_max;
		arr[i].pred = -1;
	}
	arr[src].dist = 0;
}
bool bellman_ford(int src, int n) { //returns whether or not there is a negative loop, results of path finding are stored in arr
	intitialize_single_source (n, src);
	for (int i = 0; i < n - 1; i++) {
		
		for (int u = 0; u < n; u++) {
			for (int v = 0; v < n; v++) {
				relax(u, v);
			}
		}
	}
	for (int u = 0; u < n; u++) {
		for (int v = 0; v < n; v++) {
			if (Graph[u][v] != int_max) {
				if (arr[v].dist > arr[u].dist + Graph[u][v]) {
					return false;
				}
			}
		}
	}
	return true;
}
int main()
{
	int V, E, src;
	cin >> V >> E >> src;
	src--; //0-index
	for (int i = 0; i < V; i++) {
		for (int j = 0; j < V; j++) {
			Graph[i][j] = int_max;
		}
	}
	for (int i = 0; i < E; i++) {
		int s, d, w;
		cin >> s >> d >> w;
		s--;
		d--;
		Graph[s][d] = w;
	}
	if (bellman_ford(src, V)) {
		for (int i = 0; i < V; i++) {
			if (i != src)
				cout << "shortest distance from node " << i + 1 << " to " << src + 1 << " is: " << arr[i].dist << endl;
		}
	}
	else {
		cout << "no sol, neg weight cycle" << endl;
	}
	return 0;
}

