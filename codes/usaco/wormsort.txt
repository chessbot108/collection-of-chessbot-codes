
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 100100
#define cin fin
#define cout fout
using namespace std;

ifstream fin("wormsort.in");
ofstream fout("wormsort.out");


struct edge{
	int u, v, dist;
	
	bool operator < (const edge & b) const{
		return u < b.u;
	}
	
	
} edges[max_v * 2];

int vis[max_v], perm[max_v], U[max_v * 2], ind[max_v];
int V, E, Low;


bool dfs(int cur, int src){
	if(vis[cur]) return true;
	
	vis[cur] = src;
	
	for(int i = ind[cur]; edges[i].u == cur; i++){
		if(edges[i].dist < Low) cont;
		
		dfs(edges[i].v, src);
		
		
	}
	
	
	//printf("%d -> %d %d\n", cur, vis[cur], perm[cur]);
	
	
	if(vis[perm[cur]] == vis[cur]){
		return true;
	}else{
		return false;
	}
}

bool check(int low){
	
	memset(vis, 0, sizeof(vis));
	
	bool sol = true;
	Low = low; //saves recursion parameters
	
	for(int i = 1; i<=V; i++){
		sol &= dfs(i, i);
	}
	
	return sol;
}


int bin_search(int l, int r, int cnt){
	
	int mid = (l + r) / 2;
	
	//printf("%d %d %d\n", l, r, mid);
	
	if(cnt > 100) return mid;
	
	if(check(mid)){
		return bin_search(mid, r, ++cnt);
	}else{
		return bin_search(l, mid, ++cnt);
	}
	
}


int main() {
  	
  	cin >> V >> E;
  	
  	for(int i = 1; i<=V; i++){
  		cin >> perm[i];
	}
	
	if(is_sorted(perm + 1, perm + V + 1)){
		cout << -1;
		fout.close();
	}
	
	for(int i = 0; i<E; i++){
		int x = i*2, s, d, w;
		cin >> s >> d >> w;
		edges[x].u = s; edges[x].v = d;
		edges[x + 1].u = d; edges[x + 1].v = s;
		edges[x].dist = w; edges[x + 1].dist = w;
	}
	
	sort(edges, edges + E*2);
	
	for(int i = 0; i<E*2; i++){
		U[i] = edges[i].u;
		
	}
	
	for(int i = 1; i<=V; i++){
		ind[i] = lower_bound(U, U + E*2, i) - &U[0];
		if(U[ind[i]] != i){
			ind[i] = E*2 + 1; //will screw up the loop
		}
	}
	
	
	
  	cout << bin_search(1, (1 << 30), 0);
  	
  	return 0;
}


