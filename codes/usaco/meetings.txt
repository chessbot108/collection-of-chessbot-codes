
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 110
#define max_E 11000
#define cin fin
#define cout fout
using namespace std;

ifstream fin("meeting.in");
ofstream fout("meeting.out");

int b_graph[max_v][max_v], e_graph[max_v][max_v];
bool b_vis[max_v][max_E], e_vis[max_v][max_E];

int V, E, max_b = -1, max_e = -1;

void visit(bool vis[max_v][max_E], int graph[max_v][max_v], int max_edge){
	vis[1][0] = true;
	for(int i = 1; i<=V; i++){
		for(int j = i + 1; j<=V; j++){
			for(int k = 0; k <= 100 * V + 1; k++){
				vis[j][k + graph[i][j]] |= vis[i][k] && graph[i][j];
				//cout << i << " " << j << " " << k << " " << vis[i][k] << " " << vis[j][k + graph[i][j]] << endl;
			}
		}
	}
}



int main() {
  	cin >> V >> E;
  	
	for(int i = 0; i<E; i++){
		int s, d, b, e;
		cin >> s >> d >> b >> e;
		b_graph[s][d] = b;
		e_graph[s][d] = e;
		max_b = max(max_b, b);
		max_e = max(max_e, e);
	}
  	
  	visit(b_vis, b_graph, max_b);
  	visit(e_vis, e_graph, max_e);
  	
  	int mini = -1;
  	for(int i = 1; i <= max(max_b, max_e) * V + 10; i++){//safe cushion
  		if(b_vis[V][i] && e_vis[V][i]){
  			mini = i;
  			break;
		}
	}
  	
  	if(mini == -1){
  		cout << "IMPOSSIBLE";
	}else{
		cout << mini;
	}
  	
  	return 0;
}


