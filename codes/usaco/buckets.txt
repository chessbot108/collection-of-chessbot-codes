#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <iomanip>
#include <vector>
#include <queue>
#define N 10
#define cont continue
#define int_max 0x3fffffff
#define cin fin
#define cout fout
using namespace std;
ifstream fin("buckets.in");
ofstream fout("buckets.out");

const int row[] = {0, 0, -1, 1};
const int col[] = {1, -1, 0, 0};
char arr[N+1][N+1];
struct node{
	int x;
	int y;
	int layer;
	bool check(){
		return !(x < 0 || y < 0 || x >= N || y >= N || arr[x][y] == 'R');
	}
};
/**
void print_arr(){
	for(int i =0; i<N; i++){
		for(int j =0; j<N; j++){
			cout << arr[i][j];
		}
		cout << endl;
	}
	cout << endl;
}
**/
int bfs(node src){
	queue<node> Q;
	Q.push(src);
	while(!Q.empty()){
		node cur = Q.front();
		Q.pop();
		if(arr[cur.x][cur.y] == 'R'){
			cont;
		}else if(arr[cur.x][cur.y] == 'B'){
			return cur.layer - 1;
		}
		arr[cur.x ][cur.y] = 'R';
		//print_arr();
		for(int i =0; i<4; i++){
			node b = {cur.x + row[i], cur.y + col[i], cur.layer + 1};
			if(b.check() ){
				Q.push(b);
			}
		}
	}
	return -1;
}
int main(){
	node src;
	for(int i =0; i<N; i++){
		for(int j =0; j<N; j++){
			cin >> arr[i][j];
			if(arr[i][j] == 'L'){
				src.x = i;
				src.y = j;
				src.layer = 0;
			}
		}
	}
	cout << bfs(src);
	return 0;
}