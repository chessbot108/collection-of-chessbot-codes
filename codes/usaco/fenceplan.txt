/**
NAME: weiming2
LANG: C++14
TASK: fenceplan
**/
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 101000

#define cin fin
#define cout fout
using namespace std;

ifstream fin("fenceplan.in");
ofstream fout("fenceplan.out");


struct edge{
	int u, v;
	bool operator < (const edge& b) const{
		return u < b.u;
	}
} edges[max_v*2];

int X[max_v], Y[max_v], U[max_v * 2];
bool vis[max_v];
vector<int> group;
int V, E;

int get_ind(int u){
	return lower_bound(U, U + E*2, u) - &U[0];
}

void dfs(int cur){
	if(vis[cur]) return;
	vis[cur] = true;
	group.push_back(cur);
	for(int i = get_ind(cur); edges[i].u == cur; i++){
		dfs(edges[i].v);
	}
}


int main() {
	
	cin >> V >> E;
	
	for(int i = 0; i<V; i++){
		cin >> X[i] >> Y[i];
	}
	
	for(int i = 0; i<E; i++){
		int s, d;
		cin >> s >> d;
		s--; d--;
		edges[i*2].u = s; edges[i*2].v = d;
		edges[i*2 + 1].u = d; edges[i*2 + 1].v = s;  
	}
	
	sort(edges, edges + E*2);
	
	for(int i = 0; i<E*2; i++){
		U[i] = edges[i].u;
	}
	
	int sol = int_max;
	
	for(int i = 0; i<V; i++){
		if(vis[i]) cont;
		group.clear();
		dfs(i);
		
		int x1 = int_max, y1 = int_max, x2 = -1, y2 = -1;
		//cout << "new group: \n";
		for(int j = 0; j<group.size(); j++){
			
			int ind = group[j];
			//printf("%d -> (%d, %d)\n", ind, X[ind], Y[ind]);
			x1 = min(x1, X[ind]);
			x2 = max(x2, X[ind]);
			y1 = min(y1, Y[ind]);
			y2 = max(y2, Y[ind]);
		}
		
		int peri = (abs(x1 - x2) * 2) + (abs(y1 - y2) * 2);
		
		sol = min(sol, peri);
		
	}
	
	cout << sol;
	
	
  	
  	return 0;
}


