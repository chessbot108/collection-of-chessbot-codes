
#include <iostream> 
#include <stack>
#include <queue> 
#include <vector> 
#include <cstdio> 
#include <cstring> 
#include <cmath> 
#include <utility>
#include <algorithm> 
#include <fstream> 
#include <iomanip> 
#include <string> 
#include <climits> 
#include <set> 
#include <iterator>
#include <fstream>
#include <list>

#define int_max 0x3f3f3f3f
#define cont continue
#define max_v 8000
#define byte_max 0x3f
using namespace std;

long long dist[max_v], V, K;
bool vis[max_v];
vector<long long> edges_used;

long long make_edge(long long a, long long b){
	long long temp = (a*2019201913 + b*2019201949) % 2019201997;
	long long temp2 = (b*2019201913 + a*2019201949) % 2019201997;
	return (a < b) ? temp:temp2;
}

long long prim(){ //maximum spanning tree
	memset(dist, byte_max, sizeof(dist));
	dist[1] = 0;
	while(true){
		long long u = 0LL;
		for(long long i = 1LL; i<=V; i++){
			if(u == 0LL || dist[i] < dist[u]){
				if(vis[i]) cont;
				u = i;
			}
		}
		if(u == 0LL) break;
		vis[u] = true;
		edges_used.push_back(dist[u]);
		for(long long i = 1LL; i<=V; i++){
			if(i == u) cont;
			dist[i] = min(make_edge(i, u), dist[i]);
		}
	}
	
	sort(edges_used.begin(), edges_used.end(), greater<int>());
	long long max_edge = (1LL << 50);
	for(long long i = 0; i<K-1; i++){
		max_edge = min(max_edge, edges_used[i]);
	}
	
	
	return max_edge;
}



int main(){
	
	freopen("walk.in", "r", stdin);
	freopen("walk.out", "w+", stdout);
	
	cin >> V >> K;
	cout << prim();
	
	return 0;
}

