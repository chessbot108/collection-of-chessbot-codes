/*
ID: weiming2
TASK: holstein
LANG: C++14
*/
#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <iomanip>
#include <vector>
#include <bitset>
#define max_v 1010
#define v_max 30
#define int_max 0x3fffffff
#define cont continue
#define hash_max 40000
//#define cin fin
//#define cout fout
using namespace std;

ifstream fin("holstein.in");
ofstream fout("holstein.out");
const int bit_ind[16] = { 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768};
int vita[v_max], temp[v_max];
int feed[v_max][v_max]; //feed[i][j] -> amount of vitamin j, 1 scoop of i has
bool comp[hash_max];

int n, m;

//1/0 knapsack with int hashing for dp
//hashing -> if a bit is true, then that index is in my knapsack

int bit_num(int a){
	bitset<16> b_a = a;
	return b_a.count();
}

bool check(int hashing){
	memset(temp, 0, sizeof(temp));
	
	for(int i =0; i<m; i++){
		bool takes = hashing&1;
		hashing >>= 1;
		if(takes){
			for(int j = 0; j<n; j++){
				temp[j] += feed[i][j];
			}
		}
		
	}
	for(int i =0; i<n; i++){
		if(temp[i] < vita[i]){
			return false;
		}
	}
	return true;
	
	
}

int solve(int & hashing){
	int maxi = -1, b_maxi = int_max;
	for(int i =1; i<bit_ind[m]; i++){
		comp[i] = check(i);
		//cout << i << " gives the result " << boolalpha << comp[i] << endl;
		if(comp[i] && b_maxi > bit_num(i)){
			maxi = i;
			b_maxi = bit_num(i);
			//cout << i << '\n';
		}
	}
	hashing = maxi;
	return b_maxi;
}

int main()
{   
	cin >> n;
	for(int i =0; i<n; i++){
		cin >> vita[i];
	}
	cin >> m;
	for(int i =0; i<m; i++){
		for(int j =0; j<n; j++){
			cin >> feed[i][j];
		}
	}
	int temp;
	cout << solve(temp);
	for(int i =0; i<m; i++){
		if(temp&1){
			cout << ' ' << i+1;
		}
		temp >>= 1;
	}
	cout << endl;
	return 0;
}