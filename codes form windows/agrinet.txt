/**
NAME: weiming2
LANG: C++14
TASK: agrinet
**/

#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <unordered_map>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3fffffff
#define byte_max 0x3f
#define max_v 110
#define cout fout
#define cin fin

using namespace std;

ifstream fin("agrinet.in");
ofstream fout("agrinet.out");

class disj_set {
	int parent[max_v], rank[max_v], n;
public:
	disj_set(int n) {
		this->n = n;
		make_set();
	}
	void make_set() {
		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
	}
	int find(int index) {
		if (index != parent[index]) {
			parent[index] = find(parent[index]);
		}
		return parent[index];
	}
	void link(int x_rep, int y_rep) {
		if (rank[x_rep] > rank[y_rep]) {
			parent[y_rep] = x_rep;
		}
		else {
			parent[x_rep] = y_rep;
			if (rank[x_rep] == rank[y_rep]) {
				rank[y_rep]++;
			}
		}
		
	}
	void Union(int x, int y) {
		int x_rep = find(x);
		int y_rep = find(y);
		link(x_rep, y_rep);
	}
};


vector<pair<int, pair<int, int>>> edges;

int main() {
	int n;
	cin >> n;
	disj_set D(n);
	for(int i = 0; i<n; i++){
		for(int j = 0; j<n; j++){
			int w;
			cin >> w;
			if(i == j) cont;
			edges.push_back(make_pair(w, make_pair(i, j)));
		}
	}
	
	sort(edges.begin(), edges.end());
	
	int total = 0;
	
	for(int i = 0; i<edges.size(); i++){
		int w = edges[i].first;
		int u = edges[i].second.first;
		int v = edges[i].second.second;
		
		if(D.find(u) != D.find(v)){
			D.Union(u, v);
			total += w; 
		}
	}
	
	cout << total << endl;
	
	
  	return 0;
}