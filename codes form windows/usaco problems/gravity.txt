
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <list>
#include <fstream>
#include <tuple>

#define max_v 550
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define cont continue
//#define cin fin
//#define cout fout
using namespace std;

ifstream fin("gravity.in");
ofstream fout("gravity.out");

struct node{
	int dist, x, y, dir;
	
	node (int a, int b, int c, int d){
		dist = a; x = b; y = c; dir = d;
	}
	
	bool operator < (const node& b) const{
		return dist > b.dist;
	}
};

char arr[max_v][max_v];
int dist[max_v][max_v][5], n, m;
bool vis[max_v][max_v][5];
priority_queue<node> pq;
	
	
	
int grav(int x, int y, int dir){
	while(arr[x][y] == '.'){
		x += dir;
	}
	return x - dir;
}


void push(const node& a){
	printf("\t%d %d %d %d\n", a.x, a.y, a.dist, a.dir);
	if(dist[a.x][a.y][a.dir + 1] > a.dist){
		dist[a.x][a.y][a.dir + 1] = a.dist;
		pq.push(a);
	}
}

int dijkstra(int x, int y){
	memset(dist, byte_max, sizeof(dist)); //memset the whole thing to inf
	
	node src(0, x, y, 1);
	dist[x][y][2] = 0;
	
	pq.push(src);
	
	while(!pq.empty()){
		node cur = pq.top(); pq.pop();
		x = cur.x; y = cur.y; //reusing variables
		printf("%d %d %d %d\n", x, y, cur.dist, cur.dir);
		if(vis[x][y][cur.dir + 1]) cont;
		
		vis[x][y][cur.dir + 1] = true;
		
		if(x < 0 || y < 0 || x >= n || y >= m || arr[x][y] == '#') cont;
		if(arr[x][y] == 'D') return cur.dist;
		
		push(node(cur.dist + 1, x, y, -1*cur.dir));
		push(node(cur.dist, x + cur.dir, y, cur.dir));
	
		if(arr[x + cur.dir][y] == '#'){
			push(node(cur.dist, x, y - 1, cur.dir));
			push(node(cur.dist, x, y + 1, cur.dir));
		}
	}
	
	return -1;
}



int main(){
	int x, y;
	cin >> n >> m;
	
	for(int i = 0; i<n; i++){
		for(int j = 0; j<m; j++){
			cin >> arr[i][j];
			if(arr[i][j] == 'C'){
				x = i; y = j;
			}
		}
	}
	
	cout << dijkstra(x, y);
	
	return 0;
}

