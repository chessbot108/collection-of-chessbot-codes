#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <iomanip>
#include <vector>
#include <queue>
#include <bitset>
#include <string>
#include <sstream>
#include <set>

#define cont continue
#define int_max 0x3f3f3f3f
#define max_v 22000*6
#define byte_max 0x3f

#define N 10
#define pow_2(i) (1 << i)
using namespace std;

vector<int> weights; //w for weights;
int arr[N];
bool dp[max_v];
const int n = 6;


int main(){
	//freopen("a_bunch_of_points.in", "r", stdin);
	//freopen("a_bunch_of_points.out", "w", stdout);
	int kase = 0;
	while(true){
		memset(dp, false, sizeof(dp));
		memset(arr, 0, sizeof(arr));
		weights.clear();
		
		int total = 0;
		
		for(int i = 0; i<n; i++){
			cin >> arr[i];
			total += (arr[i]*(i+1));
		}
		
		if(total == 0) break;
		
		printf("Collection #%d:\n", ++kase);
		
		if(total&1){
			printf("Can\'t be divided.\n\n");
			cont;
		}
		
		total /= 2;
		
		for(int i = 0; i<n; i++){
			for(int j = 1; j<=arr[i]; j <<= 1){
				weights.push_back((i+1)*j);
				arr[i] -= j;
			}
			if(arr[i])
				weights.push_back(arr[i]*(i+1));
		}
		
		sort(weights.begin(), weights.end());
		
		dp[0] = true;
		
		for(int w : weights){
			for(int i = total; i >= 0; i--){
				if(i < w) cont;
				dp[i] |= dp[i - w];
				//printf("%d -> %d\n", i, (int)dp[i]);
			}
		
		}
		
		if(dp[total]){
			printf("Can be divided.\n\n");
		}else{
			printf("Can\'t be divided.\n\n");
		}
		
		
		
	}
	
	
	
	return 0;
}


