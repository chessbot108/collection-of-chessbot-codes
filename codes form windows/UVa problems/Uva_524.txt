#include <iostream>
#include <string>
#include <queue>
#include <stack>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <iomanip>
#include <map>

#define int_max 0x3fffffff //practical upper bound
#define cont continue
#define max_v 1010

using namespace std;

const int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
bool visited[18];
bool prime[50];
int n;
stack<int> s;

bool is_prime(int a){
    for(int i = 2; i<a; i++){
        if(a % i == 0){
            return false;   
        }
    }
    return true;
}

void print_stack(stack<int> f){
    stack<int> temp;
    int cur = f.top();
    while(!f.empty()){
        temp.push(f.top());
        f.pop();
    }
    if(!prime[cur + temp.top()]){
        return;   
    }
    while(temp.size() != 1){
        printf("%d ", temp.top());
        temp.pop();
    }
    printf("%d\n", temp.top());
}

void dfs(){
    if(s.size() == n){
        print_stack(s);
        return ;
    }
    
    for(int i = 0; i<n; i++){
        if(!visited[i]){
            if(!prime[arr[i] + s.top()]) cont;
            visited[i] = true;
            s.push(arr[i]);
            dfs();
            s.pop();
            visited[i] = false;
        }
    }
    
    
}



int main(){
    
    for(int i = 2; i<40; i++){
        prime[i] = is_prime(i);   
    }
    bool fir = false;
    int kase = 0;
    while(cin >> n){
        kase++;
        
        if(fir) cout << endl;
        fir = true;
        printf("Case %d:\n", kase);
        while(!s.empty()) s.pop();
        memset(visited, false, sizeof(visited));
        visited[0] = true;
        s.push(1);
        dfs();
    }
  return 0;
}