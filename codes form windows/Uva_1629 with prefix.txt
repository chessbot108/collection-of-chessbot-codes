#include <iostream>
#include <string>
#include <queue>
#include <stack>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <iomanip>
#include <map>
#include <set>
#include <sstream>

#define int_max 0x3ffffff3 
#define cont continue
#define max_v 30

using namespace std;

int n, m, k;
int grid[max_v][max_v]; //helps with prefix sums
int dp[max_v][max_v][max_v][max_v]; //dp array
int cherries[max_v][max_v][max_v][max_v]; //the number of cherries in the grid (x1, y1) (x2, y2)
bool vis[max_v][max_v][max_v][max_v]; //vis array

int DP(int x1, int y1, int x2, int y2){
	
	int& cur = dp[x1][y1][x2][y2];
	
	
	
	
	if(cur || (cur == 0 && vis[x1][y1][x2][y2])) return cur;
	
	
		
	if(cherries[x1][y1][x2][y2] == 0){
		cur = int_max;
		return cur;
	}else if(cherries[x1][y1][x2][y2] == 1){
		vis[x1][y1][x2][y2] = true;
		return 0;
	}

	cur = int_max;
	
	for(int i = x1 + 1; i < x2; i++){
		cur = min(cur, DP(x1, y1, i, y2) + DP(i, y1, x2, y2) + abs(y2 - y1));
	}
	
	for(int i = y1 + 1; i < y2; i++){
		cur = min(cur, DP(x1, y1, x2, i) + DP(x1, i, x2, y2) + abs(x2 - x1));
	}
	
	
	return cur;
	
}


int main(){
	int kase = 0;
	while(scanf("%d %d %d", &n, &m, &k) == 3){
		memset(dp, 0, sizeof(dp));
		memset(cherries, 0, sizeof(cherries));
		memset(vis, false, sizeof(vis));
		memset(grid, 0, sizeof(grid));
		
		if(k == 0){
			printf("Case %d: %d\n", ++kase, 0);
			cont;
		}

		for(int i = 0; i<k; i++){
			int x, y;
			scanf("%d %d", &x, &y);
			if(!grid[x][y] && x && y)
				grid[x][y]++;
		}
		
		for(int i = 1; i <= n; i++){
			for(int j = 1; j <= m; j++){
				grid[i][j] += grid[i - 1][j] + grid[i][j - 1] - grid[i - 1][j - 1];
			}
		}
		
		
		
		
		for(int x1 = 0; x1 < n; x1++){
			for(int y1 = 0; y1 < m; y1++){
				for(int x2 = x1 + 1; x2 <= n; x2++){
					for(int y2 = y1 + 1; y2 <= m; y2++){
						cherries[x1][y1][x2][y2] = (grid[x1][y1] + grid[x2][y2]) - (grid[x1][y2] + grid[x2][y1]);
					}
				}
			}
		}
		
		
		
		
		printf("Case %d: %d\n", ++kase, DP(0, 0, n, m));
		
		
	}    
    
    
    return 0;
}