
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <unordered_set>
#include <string>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 260
#define max_r 1100000

#define cin fin
#define cout fout

using namespace std;

ifstream fin("multimoo.in");
ofstream fout("multimoo.out");

struct region{
	int x, y; //src
	int ID, area;
	
	region(int a, int b, int c, int d){
		x = a; 
		y = b;
		ID = c;
		area = d;
	}
	
};

int arr[max_v][max_v], n, belong[max_v][max_v], U[max_v * max_v];
vector<region> regions;
bool vis[max_v][max_v], used[max_v * max_v];
set<pair<int, int>> S;
set<pair<int, int>> VIS;



int get_ind(int u){
	return lower_bound(U, U + S.size(), u) - &U[0];
}


int dfs1(int src, int x, int y){
	if(x < 0 || y < 0 || x > n || y > n || vis[x][y] || arr[x][y] != src) return 0;
	
	vis[x][y] = true;
	belong[x][y] = regions.size();
	
	int total = dfs1(src, x + 1, y) + dfs1(src, x, y + 1) + dfs1(src, x - 1, y) + dfs1(src, x, y - 1);
	return ++total;
}


void dfs2(int ID, int x, int y){
	if(x < 0 || y < 0 || x >= n || y >= n || vis[x][y]){
		return;
	}
	
	vis[x][y] = true;
	
	if(belong[x][y] != ID){
		if(S.count(make_pair(belong[x][y], ID)) == 0 && S.count(make_pair(ID, belong[x][y])) == 0){
			S.insert(make_pair(belong[x][y], ID));
			S.insert(make_pair(ID, belong[x][y]));
		}
		return ;
	}
	
	dfs2(ID, x + 1, y);
	dfs2(ID, x, y + 1);
	dfs2(ID, x - 1, y);
	dfs2(ID, x, y - 1);
	
}


int dfs3(int ID, int a, int b){
	if(used[ID] || (regions[ID].ID != a && regions[ID].ID != b)) return 0;
	
	int total = 0;
	used[ID] = true;
	
	for(auto it = S.lower_bound(make_pair(ID, 0)); it != S.end(); it++){
		auto P = *it;
		if(P.first != ID) break;
		if((regions[P.second].ID == b || regions[P.second].ID == a) && !used[P.second])
			total += dfs3(P.second, a, b);
	}
	return total + regions[ID].area;
}


int main() {
	pair<int, int> ans = make_pair(-1, -1);
  	cin >> n;
  	for(int i = 0; i<n; i++){
  		for(int j = 0; j<n; j++){
			cin >> arr[i][j];
		}	
	}
  	
  	for(int i = 0; i<n; i++){
  		for(int j = 0; j<n; j++){
  			if(!vis[i][j]){
  				regions.push_back(region(i, j, arr[i][j], dfs1(arr[i][j], i, j)));	
			}	
		}	
	}
	
	for(int i = 0; i<regions.size(); i++){
		memset(vis, false, sizeof(vis));
		dfs2(i, regions[i].x, regions[i].y);
		ans.first = max(ans.first, regions[i].area);
	}
	
		
	for(auto P : S){
		
		if(VIS.count(make_pair(regions[P.first].ID, regions[P.second].ID)) || VIS.count(make_pair(regions[P.second].ID, regions[P.first].ID))) cont;
		
		VIS.insert(make_pair(regions[P.first].ID, regions[P.second].ID));
		VIS.insert(make_pair(regions[P.second].ID, regions[P.first].ID));
		
		memset(used, false, sizeof(used));
		
		int temp = dfs3(P.first, regions[P.first].ID, regions[P.second].ID);
		
		ans.second = max(ans.second, temp);

	}
	
	
	cout << ans.first << "\n" << ans.second;
  	
  	return 0;
}


