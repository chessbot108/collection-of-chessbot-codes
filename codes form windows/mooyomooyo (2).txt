
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <unordered_map>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 110
#define pow_2(n) (1 << n)


using namespace std;

const int m = 10;
const char temp_char = '!';
int n, k;
char board[max_v][max_v];

int dfs(int x, int y, char start, char end){
	if(x < 0 || y < 0 || x >= n || y >= m || board[x][y] != start){
		return 0;
	}
	board[x][y] = end;
	return 1 + dfs(x + 1, y, start, end) + dfs(x, y + 1, start, end) + dfs(x - 1, y, start, end) + dfs(x, y - 1, start, end);
}

void gravity(){
	for(int i = 0; i<m; i++){
		for(int j = 0; j<n; j++){
			for(int l = n - 1; l>0; l--){
				if(board[l][i] == '0' && board[l - 1][i] != '0'){
					swap(board[l][i], board[l - 1][i]); //bubble sort, but not. the limit is 100, so it's fine
				}
			}
		}
	}
}


int main() {
	
	freopen("mooyomooyo.in", "r", stdin);
	freopen("mooyomooyo.out", "w", stdout);
	
	
	cin >> n >> k;
	
	for(int i = 0; i<n; i++){
		for(int j = 0; j<m; j++){
			cin >> board[i][j];
		}
	}
	
	bool works = true;
	
	while(works){
		works = false;
		
		for(int i = 0; i<n; i++){
			for(int j = 0; j<m; j++){
				if(board[i][j] != '0'){
					char cur = board[i][j];
					if(dfs(i, j, cur, temp_char) >= k){
						dfs(i, j, temp_char, '0'); //set all tempchar's to zero
						works = true;
					}else{
						dfs(i, j, temp_char, cur); //undo what i just did
					}
				}
			}
		}
		
		gravity();
	}
	
	
	for(int i = 0; i<n; i++){
		for(int j = 0; j<m; j++){
			cout << board[i][j];
		}
		cout << endl;
	}
	
		
  	return 0;
}

