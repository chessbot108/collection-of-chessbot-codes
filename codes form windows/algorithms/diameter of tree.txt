
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <map>
#include <fstream>
#include <utility>
#include <vector>
#include <ctime>
#include <climits>
#include <sstream>
#include <set>
#include <cstring>
#include <unordered_map>

#define cont continue
#define int_max 0x3f3f3f3f
#define max_v 220
#define byte_max 0x3f

using namespace std;


set<pair<int, int>> edges;
int n, max_dist = -1, max_ind;
bool vis[max_v];

void dfs(int src, int dist){
	if(vis[src]) return ;
	
	vis[src] = true;
	
	if(max_dist < dist){
		max_ind = src;
		max_dist = dist;
	}
	
	for(auto it = edges.lower_bound(make_pair(src, 0)); it != edges.end(); it++){
		if((*it).first != src) break;
		dfs((*it).second, dist + 1);
	}
	
	vis[src] = false;
	
}


int main(){
	cin >> n;
	for(int i = 0; i<n-1; i++){
		int s, d;
		cin >> s >> d;
		s--; d--;
		edges.insert(make_pair(d, s));
		edges.insert(make_pair(s, d));
	}
	
	dfs(0, 1);
	dfs(max_ind, 1);
	
	cout << max_dist;
	
	return 0;
}

