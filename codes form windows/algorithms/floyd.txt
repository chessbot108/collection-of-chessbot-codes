// xjoi_algoithms.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <map>
#include <fstream>
#include <utility>
#include <vector>
#include <ctime>
#include <climits>
#define cont continue
#define int_max 0x3fffffff
#define max_v 1010
using namespace std;
int Graph[max_v][max_v];
int dp[max_v][max_v];
int get_edge(int u, int v) {
	return Graph[u][v];
}
void add_edge(int u, int v, int w) {
	Graph[u][v] = w;
}

bool floyd(int V) {
	for (int i = 0; i < V; i++) {
		for (int j = 0; j < V; j++) {
			dp[i][j] = get_edge(i, j);
			if (i == j)
				dp[i][j] = 0;
		}
	}
	for (int k = 0; k < V; k++) {
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);
			}
		}
	}
	for (int u = 0; u < V; u++) {
		for (int v = 0; v < V; v++) {
			if (get_edge(u, v) != int_max) {
				if (dp[u][v] < get_edge(u, v)) {
					return false;
				}
			}
		}
	}
	return true;
}
int main()
{
	int V, E;
	cin >> V >> E;
	for (int i = 0; i < V; i++) {
		for (int j = 0; j < V; j++) {
			Graph[i][j] = int_max;
		}
	}
	for (int i = 0; i < E; i++) {
		int s, d, w;
		cin >> s >> d >> w;
		s--;
		d--;
		add_edge(s, d, w);
	}
	bool no_neg_loop = floyd(V);
	if (no_neg_loop) {
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				if (dp[i][j] == int_max) {
					cout << " inf";
				}
				else {
					printf("%12d", dp[i][j]);
				}

			}
			cout << endl;
		}
	}
	else {
		cout << "no sol, neg loop" << endl;
	}
	return 0;
}

