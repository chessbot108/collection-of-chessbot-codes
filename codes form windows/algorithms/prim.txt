// xjoi_algoithms.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include <iostream>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <map>
#include <fstream>
#include <utility>
#include <vector>
#include <ctime>
#include <climits>
#define cont continue
#define int_max 0x3fffffff
#define max_v 1010
using namespace std;
int Graph[max_v][max_v];
bool visited[max_v];
struct node {
	int pred;
	int dist;
} arr[max_v];
struct cmp {
	bool operator ()(int a, int b) {
		return arr[a].dist > arr[b].dist;
	}
};
int get_edge(int u, int v) {
	return Graph[u][v];
}
void add_edge(int u, int v, int w) {
	Graph[u][v] = w;
	return ;
}
void initialize_single_source(int V, int r) {
	for (int i = 0; i < V; i++) {
		arr[i].dist = int_max;
		arr[i].pred = i;
	}
	arr[r].dist = 0;
	return;
}
void prim(int r, int V, vector<int> & sol) {//r is for root
	priority_queue<int, vector<int>, cmp> pq;
	initialize_single_source(V, r);
	pq.push(r);
	while (!pq.empty()) {
		int u = pq.top();
		pq.pop();
		if (visited[u]) {
			cont;
		}
		visited[u] = true;
		sol.push_back(u);
		for (int i = 0; i < V; i++) {
			if (Graph[u][i] != int_max) {
				if (!visited[i] && get_edge(u, i) < arr[i].dist) {
					arr[i].pred = u;
					arr[i].dist = get_edge(u, i);
					pq.push(i);
				}
			}
		}
	}
}
int main()
{
	int V, E;
	cin >> V >> E;
	for (int i = 0; i < V; i++) {
		for (int j = 0; j < V; j++) {
			Graph[i][j] = int_max;
		}
	}
	for (int i = 0; i < E; i++) {
		int s, d, w;
		cin >> s >> d >> w;
		s--;
		d--;
		add_edge(s, d, w);
		add_edge(d, s, w);
	}
	vector<int> sol;
	prim(0, V, sol);
	for (int x : sol) {
		cout << x + 1 << ' ';
	}
	cout << endl;
	for (int i = 0; i < V; i++) {
		cout << i + 1 << " -> " <<  arr[i].pred + 1 << '\n';
	}
	return 0;
}

