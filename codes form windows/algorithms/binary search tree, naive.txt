
#include <bits/stdc++.h>

#define max_v 1000
#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f

using namespace std;

struct node{
	struct node* parent = NULL;
	struct node* left = NULL;
	struct node* right = NULL;
	int key;
	node(int key, struct node* parent){
		this->key = key;
		this->parent = parent;
	}
	node(){}
};


class bst{
	int size;
	struct node* root;
	struct node* mini;
	struct node* maxi;
	
	private: 
		struct node * tree_max(struct node* x){
			while(x->right != NULL)
				x = x->right;
			return x;
		}
	
		struct node * tree_min(struct node* x){
			while(x->left != NULL)
				x = x->left;
			return x;
		}
		
		void transplant(struct node* u, struct node* v){
			
			struct node* par = u->parent;
			if(par == NULL){
				root = v;
			}else if(u == par->left){
				par->left = v;
			}else{
				par->right = v;
			}
			if(v != NULL){
				v->parent = par;
			}
			mini = tree_min(root);
			maxi = tree_max(root);
				
		}
		
		void inorder_traverse(struct node* x){
			if(x == NULL) return;
			inorder_traverse(x->left);
			printf("%d ", x->key);
			inorder_traverse(x->right);
		}
		
		
		
	public:
		bst(){
			this->size = 0;
			this->root = NULL;
			this->mini = NULL;
			this->maxi = NULL;
		}
		
		struct node * find(int key){
			struct node* start = root;
			while(start != NULL && key != start->key){
				if(key < start->key)
					start = start->left;
				else
					start = start->right;
			}
			return start;
		}
		
		struct node * next(struct node* x){
			if(x->right != NULL) return tree_min(x);
			struct node* y = x->parent;
			while(y != NULL && x == y->right){
				x = y;
				y = y->parent;
			}
			return y;
		}
		
		void insert(int key){
			struct node* x = root;
			struct node* y = NULL;
			while(x != NULL){
				y = x;
				if(key < x->key)
					x = x->left;
				else
					x = x->right;
			}
			struct node* temp = (struct node*) malloc(sizeof(struct node));
			*temp = node(key, y);
			if(y == NULL){
				root = temp;
			}else if(key < y->key){
				y->left = temp;
				if(y == mini) mini = temp;
			}else{
				y->right = temp;
				if(y == maxi) maxi = temp;
			}
			size++;
		}
		
		void erase(int key){
			struct node* z = find(key);
			if(z == NULL) return;
		
			if(z->left == NULL){
				transplant(z, z->right);
			}else if (z->right == NULL){
				transplant(z, z->left);
			}else{
				struct node* y = tree_min(z->right);
				if(y->parent != z){
					transplant(y, y->right);
					y->right = z->right;
					(y->right)->parent = y;
				}
				transplant(z, y);
				y->left = z->left;
				(y->left)->parent = y;
			}
			
			size--;
		}
		
		void print(){
			inorder_traverse(root);
			puts("");
		}
		
		
};


int main(){
	
	
	
	
	
	return 0;
}


