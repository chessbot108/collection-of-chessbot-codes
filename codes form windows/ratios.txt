/**
NAME: weiming2
LANG: C++14
TASK: ratios
**/

#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define N 5
#define cin fin
#define cout fout
using namespace std;

ifstream fin("ratios.in");
ofstream fout("ratios.out");

struct ans{
	int a, b, c, d;
	ans (int a, int b, int c, int d){
		this->a = a;
		this->b = b;
		this->c = c;
		this->d = d;
	}
	bool operator < (const ans & B) const{
		int tot = a + b + c;
		int b_tot = B.a + B.b + B.c;
		return (tot < b_tot) || (tot == b_tot && d < B.d);
	}
};

int goal[N], arr[N][N];
int temp[N], d[N];


int main() {
	int n = 3, t_tot = 0;;
	for(int i = 0; i<n; i++){
		cin >> goal[i];
		t_tot += goal[i];
	}
	
	if(t_tot == 0) cout << "0 0 0 0\n", fout.close();
	
	for(int i = 0; i<n; i++){
		for(int j = 0; j<n; j++){
			cin >> arr[i][j];
		}
	}
	
	vector<ans> res;
	
	for(int a = 0; a <= 100; a++){
		for(int b = 0; b <= 100; b++){
			for(int c = 0; c <= 100; c++){
				if(a + b + c == 0) cont;
				
				for(int i = 0; i<n; i++){
					temp[i] = (arr[0][i] * a) + (arr[1][i] * b) + (arr[2][i] * c);
				}
				memset(d, 0, sizeof(d));
				int zeroes = 0, same = 0, D = 0, ind = 0, works = 0;
				
				for(int i = 0; i<n; i++){
					if((goal[i] == 0 && temp[i] == 0) || (temp[i] == 0 && goal[i] != 0)){ zeroes++; cont;}
					else if(goal[i] == 0 ){cont;}
					
					if(temp[i] % goal[i] == 0) d[i] = temp[i] / goal[i];
					else works++; // unique values that won't ever match
					
				}
				
				if(works != 0) cont; 
				works = 0;
				
				for(int i = 0; i<n; i++){
					D = max(D, d[i]);
				}
				
				for(int i = 0; i<n; i++){
					if(goal[i] * D == temp[i]){
						works++;
					}
				}
				
				
				if(works == 3){
					//printf("%d %d %d %d\n", a, b, c, d[0]);
					res.push_back(ans(a, b, c, d[0]));
				}
				
				
				
			}
		}
	}
	
	
	if(res.size()){
	
		sort(res.begin(), res.end());
	
		cout << res[0].a << " " << res[0].b << " " << res[0].c << " " << res[0].d << endl;	
	}else{
		cout << "NONE\n";
	}
	
	
	
	
  	return 0;
}
