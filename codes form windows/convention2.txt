
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 10100

//these macros are awesome

#define arrival first
#define senority second.first
#define time second.second

#define index second

using namespace std;

vector<pair<long long, pair<long long, long long>>> cows; 
priority_queue<pair<long long, long long>> pq;
int n;



long long solve(){
	long long finished = cows[0].arrival + cows[0].time, sol = 0;
	int i = 1;
	
	while(i < n || !pq.empty()){ //there are cows in line or not "processed" yet
		while(i < n && cows[i].arrival <= finished){
			pq.push(make_pair(cows[i].senority, i)); //insert all new cows
			i++;
		}
		
		if(pq.empty() && i < n){
			finished = cows[i].arrival + cows[i].time; //if there is a gap
			i++;
		}else if(pq.size()){
			auto top = pq.top(); pq.pop();
			
			sol = max(sol, finished - cows[top.index].arrival); //process a cow
			finished += cows[top.index].time;	
		}
	}
	
	return sol;
}

int main() {
	
	freopen("convention2.in", "r", stdin);
	freopen("convention2.out", "w", stdout);
	
  	cin >> n;
	for(long long i = 0; i<n; i++){
		long long a, b;
		cin >> a >> b;
		cows.push_back(make_pair(a, make_pair(max_v - i, b)));
	}  	
	
	sort(cows.begin(), cows.end());
  	
  	cout << solve();
	  
	return 0;
}


