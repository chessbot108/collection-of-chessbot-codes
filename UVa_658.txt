
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <set>
#include <string>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3f3f3f3f
#define byte_max 0x3f
#define max_v 110
#define pow_2(n) (1 << n)
#define max_n pow_2(21)

using namespace std;

struct node{
	int state, dist;
	
	bool operator < (const node& b) const{
		return dist > b.dist;
	}
};

int V, E, cost[max_v], dist[max_n];
char before[max_v][30], after[max_v][30];
bool vis[max_n];

int dijkstra(){
	memset(dist, byte_max, sizeof(dist)); // init dist to INF
	
	priority_queue<node> pq;
	node src  {pow_2(V) - 1, 0};
	dist[src.state] = 0;
	
	pq.push(src);
	
	while(!pq.empty()){
		node cur = pq.top(); pq.pop();
		
		if(cur.state == 0) return cur.dist; //all bugs fixed
		if(vis[cur.state]) cont;
		
		vis[cur.state] = true;
		
		for(int i = 0; i<E; i++){
			bool works = true;
			
			for(int j = 0; j<V; j++){
				if((before[i][j] == '-' && (cur.state & pow_2(j))) || (before[i][j] == '+' && (cur.state & pow_2(j)) == 0)){
					works = false;
					break;
				}
			}
			
			if(!works) cont;
			
			node u  {cur.state, cur.dist + cost[i]};
			
			for(int j = 0; j<V; j++){
				if(after[i][j] == '-') u.state &= ~(1 << j);
				if(after[i][j] == '+') u.state |= (1 << j);
			}
			
			if(dist[u.state] < 0 || u.dist < dist[u.state]){
				dist[u.state] = u.dist;
				pq.push(u);
			}
			
		}

		
	}
	
	return -1;
}

int main(){
	
	int kase = 0;
	
	while(scanf("%d%d", &V, &E) == 2){
		if(V + E == 0) break;
		
		//deconstruct
		memset(vis, false, sizeof(vis));
		memset(cost, 0, sizeof(cost));
		
		
		for(int i = 0; i<E; i++){
			scanf("%d%s%s", &cost[i], before[i], after[i]);
		}
		
		int ans = dijkstra();
		
		printf("Product %d\n", ++kase);
		
		if(ans < 0) {
			printf("Bugs cannot be fixed.\n\n");
		}else {
			printf("Fastest sequence takes %d seconds.\n\n", ans);
		}
		
		
		
		
	}
	
	
	
	return 0;
}

