
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <queue>
#include <unordered_map>
#include <set>
#include <string>
#include <sstream>
#include <functional>
#include <list>
#include <fstream>

#define cont continue
#define int_max 0x3fffffff
#define byte_max 0x3f
#define max_v 101000

using namespace std;
class DSU{
    int rank[max_v], parent[max_v], n;
    public :
    DSU(int n){
      this->n = n;
      for(int i = 0; i<=n; i++){
          rank[i] = 1;
          parent[i] = i;
        }
    }
    
    int find(int a){
        if(parent[a] != a){
            parent[a] = find(parent[a]);   
        }
        return parent[a];
    }
    
    void Union(int a, int b){
        a = find(a); b = find(b);
        if(a == b) return;
        if(a > b) swap(a, b);
        rank[a] += rank[b];
        parent[b] = a;
    } 
};

struct edge{
    int u, v, w;
} edges[max_v];

int perm[max_v], V, E;

bool check(int mid){
    DSU D(V);
    for(int i = 0; i<E; i++){
        if(edges[i].w > mid){
            D.Union(edges[i].u, edges[i].v);   
        }
    }
    for(int i = 1; i<=V; i++){
        if(D.find(i) != D.find(perm[i])){
            return false;   
        }
    }
    return true;
}

int bin_search(int l, int r){
    if(l >= r) return l;
    int mid = (l + r)/2;
    if(!check(mid)){
        return bin_search(l, mid);   
    }else{
        return bin_search(mid + 1, r);   
    }
}


int main() {
    freopen("wormsort.in", "r", stdin);
    freopen("wormsort.out", "w+", stdout);
  	scanf("%d%d", &V, &E);
  	for(int i = 1; i<=V; i++){
  	    scanf("%d", &perm[i]);   
  	}
  	
  	if(is_sorted(&perm[0], &perm[V])){
  	    printf("%d\n", -1);
  	    return 0;
  	}
  	
  	for(int i = 0; i<E; i++){
  	    scanf("%d%d%d", &edges[i].u, &edges[i].v, &edges[i].w);   
  	}
  	printf("%d\n", bin_search(1, (1 << 30)));
  	return 0;
}

